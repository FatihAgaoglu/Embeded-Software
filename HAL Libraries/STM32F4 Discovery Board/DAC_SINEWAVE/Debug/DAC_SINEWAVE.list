
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004530  08004530  00014530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004728  08004728  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  0800473c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800473c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab3a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd2  00000000  00000000  0002ab76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b15  00000000  00000000  0002dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d176  00000000  00000000  0004e805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8fa9  00000000  00000000  0005b97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e0  00000000  00000000  00124974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004514 	.word	0x08004514

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004514 	.word	0x08004514

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <SinWaveGenerator>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SinWaveGenerator ()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e03d      	b.n	8000e90 <SinWaveGenerator+0x88>
	{
		sine_value[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb27 	bl	800046c <__aeabi_i2d>
 8000e1e:	a324      	add	r3, pc, #144	; (adr r3, 8000eb0 <SinWaveGenerator+0xa8>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fb8c 	bl	8000540 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <SinWaveGenerator+0x98>)
 8000e36:	f7ff fcad 	bl	8000794 <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	ec43 2b17 	vmov	d7, r2, r3
 8000e42:	eeb0 0a47 	vmov.f32	s0, s14
 8000e46:	eef0 0a67 	vmov.f32	s1, s15
 8000e4a:	f002 fb19 	bl	8003480 <sin>
 8000e4e:	ec51 0b10 	vmov	r0, r1, d0
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <SinWaveGenerator+0x9c>)
 8000e58:	f7ff f9bc 	bl	80001d4 <__adddf3>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <SinWaveGenerator+0xa0>)
 8000e6a:	f7ff fb69 	bl	8000540 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fe25 	bl	8000ac4 <__aeabi_d2uiz>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	490b      	ldr	r1, [pc, #44]	; (8000eac <SinWaveGenerator+0xa4>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 fb0f 	bl	80014a8 <HAL_Delay>
	for (int i=0; i<100; i++)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b63      	cmp	r3, #99	; 0x63
 8000e94:	ddbe      	ble.n	8000e14 <SinWaveGenerator+0xc>
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40590000 	.word	0x40590000
 8000ea4:	3ff00000 	.word	0x3ff00000
 8000ea8:	40a00000 	.word	0x40a00000
 8000eac:	200000e4 	.word	0x200000e4
 8000eb0:	f01b866e 	.word	0xf01b866e
 8000eb4:	400921f9 	.word	0x400921f9

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f000 fa81 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f81d 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 f91b 	bl	8001100 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eca:	f000 f8f9 	bl	80010c0 <MX_DMA_Init>
  MX_DAC_Init();
 8000ece:	f000 f881 	bl	8000fd4 <MX_DAC_Init>
  MX_TIM2_Init();
 8000ed2:	f000 f8a9 	bl	8001028 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//timer baslatildi
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <main+0x3c>)
 8000ed8:	f001 ffc4 	bl	8002e64 <HAL_TIM_Base_Start>
  SinWaveGenerator();// noktalar olusturuldu
 8000edc:	f7ff ff94 	bl	8000e08 <SinWaveGenerator>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_value, 100, DAC_ALIGN_12B_R);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <main+0x40>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <main+0x44>)
 8000eec:	f000 fc34 	bl	8001758 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <main+0x38>
 8000ef2:	bf00      	nop
 8000ef4:	2000009c 	.word	0x2000009c
 8000ef8:	200000e4 	.word	0x200000e4
 8000efc:	20000028 	.word	0x20000028

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 faae 	bl	8003470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fab8 	bl	80024fc <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f92:	f000 f8dd 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fd19 	bl	80029ec <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc0:	f000 f8c6 	bl	8001150 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	; 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_DAC_Init+0x4c>)
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <MX_DAC_Init+0x50>)
 8000fe6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_DAC_Init+0x4c>)
 8000fea:	f000 fb92 	bl	8001712 <HAL_DAC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ff4:	f000 f8ac 	bl	8001150 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ff8:	2324      	movs	r3, #36	; 0x24
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_DAC_Init+0x4c>)
 8001008:	f000 fc92 	bl	8001930 <HAL_DAC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001012:	f000 f89d 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000028 	.word	0x20000028
 8001024:	40007400 	.word	0x40007400

08001028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM2_Init+0x94>)
 8001046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM2_Init+0x94>)
 800104e:	2253      	movs	r2, #83	; 0x53
 8001050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_TIM2_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9*2+1;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_TIM2_Init+0x94>)
 800105a:	2213      	movs	r2, #19
 800105c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_TIM2_Init+0x94>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_TIM2_Init+0x94>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <MX_TIM2_Init+0x94>)
 800106c:	f001 feaa 	bl	8002dc4 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001076:	f000 f86b 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_TIM2_Init+0x94>)
 8001088:	f001 ff54 	bl	8002f34 <HAL_TIM_ConfigClockSource>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 f85d 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001096:	2320      	movs	r3, #32
 8001098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_TIM2_Init+0x94>)
 80010a4:	f002 f944 	bl	8003330 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80010ae:	f000 f84f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000009c 	.word	0x2000009c

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_DMA_Init+0x3c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <MX_DMA_Init+0x3c>)
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_DMA_Init+0x3c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2010      	movs	r0, #16
 80010e8:	f000 fadd 	bl	80016a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010ec:	2010      	movs	r0, #16
 80010ee:	f000 faf6 	bl	80016de <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_GPIO_Init+0x4c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <MX_GPIO_Init+0x4c>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_GPIO_Init+0x4c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_GPIO_Init+0x4c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <MX_GPIO_Init+0x4c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_GPIO_Init+0x4c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119a:	2007      	movs	r0, #7
 800119c:	f000 fa78 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <HAL_DAC_MspInit+0xdc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d158      	bne.n	8001280 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <HAL_DAC_MspInit+0xe0>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a2d      	ldr	r2, [pc, #180]	; (800128c <HAL_DAC_MspInit+0xe0>)
 80011d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b2b      	ldr	r3, [pc, #172]	; (800128c <HAL_DAC_MspInit+0xe0>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_DAC_MspInit+0xe0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_DAC_MspInit+0xe0>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_DAC_MspInit+0xe0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001206:	2310      	movs	r3, #16
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <HAL_DAC_MspInit+0xe4>)
 800121a:	f000 ffd3 	bl	80021c4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_DAC_MspInit+0xec>)
 8001222:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001226:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800122a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001246:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 800124a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001256:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001266:	f000 fc3d 	bl	8001ae4 <HAL_DMA_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001270:	f7ff ff6e 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_DAC_MspInit+0xe8>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40007400 	.word	0x40007400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000
 8001294:	2000003c 	.word	0x2000003c
 8001298:	40026088 	.word	0x40026088

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ac:	d10d      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_TIM_Base_MspInit+0x3c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 f89e 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Stream5_IRQHandler+0x10>)
 8001336:	f000 fcdb 	bl	8001cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000003c 	.word	0x2000003c

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <SystemInit+0x28>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <SystemInit+0x28>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <SystemInit+0x28>)
 800135a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135e:	609a      	str	r2, [r3, #8]
#endif
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001376:	e003      	b.n	8001380 <LoopCopyDataInit>

08001378 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800137a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800137c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800137e:	3104      	adds	r1, #4

08001380 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001384:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001386:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001388:	d3f6      	bcc.n	8001378 <CopyDataInit>
  ldr  r2, =_sbss
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800138c:	e002      	b.n	8001394 <LoopFillZerobss>

0800138e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800138e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001390:	f842 3b04 	str.w	r3, [r2], #4

08001394 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001396:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001398:	d3f9      	bcc.n	800138e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800139a:	f7ff ffd3 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139e:	f002 f843 	bl	8003428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fd89 	bl	8000eb8 <main>
  bx  lr    
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013ac:	08004730 	.word	0x08004730
  ldr  r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013b8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013bc:	20000278 	.word	0x20000278

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_Init+0x40>)
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_Init+0x40>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x40>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f94f 	bl	8001690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff feb0 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f967 	bl	80016fa <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f92f 	bl	80016a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	20000274 	.word	0x20000274

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000274 	.word	0x20000274

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ff8e 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff29 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff3e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff8e 	bl	80015e4 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5d 	bl	8001590 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff31 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffa2 	bl	800164c <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e014      	b.n	800174e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	791b      	ldrb	r3, [r3, #4]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fd39 	bl	80011ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	795b      	ldrb	r3, [r3, #5]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_DAC_Start_DMA+0x22>
 8001776:	2302      	movs	r3, #2
 8001778:	e0ab      	b.n	80018d2 <HAL_DAC_Start_DMA+0x17a>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2202      	movs	r2, #2
 8001784:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d12f      	bne.n	80017ec <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_DAC_Start_DMA+0x184>)
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_DAC_Start_DMA+0x188>)
 800179a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a50      	ldr	r2, [pc, #320]	; (80018e4 <HAL_DAC_Start_DMA+0x18c>)
 80017a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d013      	beq.n	80017e2 <HAL_DAC_Start_DMA+0x8a>
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d845      	bhi.n	800184c <HAL_DAC_Start_DMA+0xf4>
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_DAC_Start_DMA+0x76>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d005      	beq.n	80017d8 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80017cc:	e03e      	b.n	800184c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3308      	adds	r3, #8
 80017d4:	613b      	str	r3, [r7, #16]
        break;
 80017d6:	e03c      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	330c      	adds	r3, #12
 80017de:	613b      	str	r3, [r7, #16]
        break;
 80017e0:	e037      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3310      	adds	r3, #16
 80017e8:	613b      	str	r3, [r7, #16]
        break;
 80017ea:	e032      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a3d      	ldr	r2, [pc, #244]	; (80018e8 <HAL_DAC_Start_DMA+0x190>)
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a3c      	ldr	r2, [pc, #240]	; (80018ec <HAL_DAC_Start_DMA+0x194>)
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4a3b      	ldr	r2, [pc, #236]	; (80018f0 <HAL_DAC_Start_DMA+0x198>)
 8001802:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001812:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	2b08      	cmp	r3, #8
 8001818:	d013      	beq.n	8001842 <HAL_DAC_Start_DMA+0xea>
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d817      	bhi.n	8001850 <HAL_DAC_Start_DMA+0xf8>
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_DAC_Start_DMA+0xd6>
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800182c:	e010      	b.n	8001850 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3314      	adds	r3, #20
 8001834:	613b      	str	r3, [r7, #16]
        break;
 8001836:	e00c      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3318      	adds	r3, #24
 800183e:	613b      	str	r3, [r7, #16]
        break;
 8001840:	e007      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	331c      	adds	r3, #28
 8001848:	613b      	str	r3, [r7, #16]
        break;
 800184a:	e002      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
        break;
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <HAL_DAC_Start_DMA+0xfa>
        break;
 8001850:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d111      	bne.n	800187c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001866:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6898      	ldr	r0, [r3, #8]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	f000 f9e5 	bl	8001c40 <HAL_DMA_Start_IT>
 8001876:	4603      	mov	r3, r0
 8001878:	75fb      	strb	r3, [r7, #23]
 800187a:	e010      	b.n	800189e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800188a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68d8      	ldr	r0, [r3, #12]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	f000 f9d3 	bl	8001c40 <HAL_DMA_Start_IT>
 800189a:	4603      	mov	r3, r0
 800189c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2201      	movs	r2, #1
 80018b8:	409a      	lsls	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e005      	b.n	80018d0 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f043 0204 	orr.w	r2, r3, #4
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	080019cf 	.word	0x080019cf
 80018e0:	080019f1 	.word	0x080019f1
 80018e4:	08001a0d 	.word	0x08001a0d
 80018e8:	08001a77 	.word	0x08001a77
 80018ec:	08001a99 	.word	0x08001a99
 80018f0:	08001ab5 	.word	0x08001ab5

080018f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	795b      	ldrb	r3, [r3, #5]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_DAC_ConfigChannel+0x18>
 8001944:	2302      	movs	r3, #2
 8001946:	e03c      	b.n	80019c2 <HAL_DAC_ConfigChannel+0x92>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2202      	movs	r2, #2
 8001952:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4013      	ands	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	22c0      	movs	r2, #192	; 0xc0
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7ff ff89 	bl	80018f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	711a      	strb	r2, [r3, #4]
}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff82 	bl	8001908 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f043 0204 	orr.w	r2, r3, #4
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff ff78 	bl	800191c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	711a      	strb	r2, [r3, #4]
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a82:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff ffd8 	bl	8001a3a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	711a      	strb	r2, [r3, #4]
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ffd1 	bl	8001a4e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f043 0204 	orr.w	r2, r3, #4
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ffc7 	bl	8001a62 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	711a      	strb	r2, [r3, #4]
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fcce 	bl	8001490 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e099      	b.n	8001c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	e00f      	b.n	8001b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b22:	f7ff fcb5 	bl	8001490 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d908      	bls.n	8001b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e078      	b.n	8001c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e8      	bne.n	8001b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_DMA_Init+0x158>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 0307 	bic.w	r3, r3, #7
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d117      	bne.n	8001c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa6f 	bl	80020cc <DMA_CheckFifoParam>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c02:	2301      	movs	r3, #1
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa26 	bl	8002060 <DMA_CalcBaseAndBitshift>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	f010803f 	.word	0xf010803f

08001c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Start_IT+0x26>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e040      	b.n	8001ce8 <HAL_DMA_Start_IT+0xa8>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12f      	bne.n	8001cda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f9b8 	bl	8002004 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	223f      	movs	r2, #63	; 0x3f
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0216 	orr.w	r2, r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0208 	orr.w	r2, r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e005      	b.n	8001ce6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cfc:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_DMA_IRQHandler+0x248>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a8e      	ldr	r2, [pc, #568]	; (8001f3c <HAL_DMA_IRQHandler+0x24c>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01a      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0204 	bic.w	r2, r2, #4
 8001d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2208      	movs	r2, #8
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2201      	movs	r2, #1
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d012      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0202 	orr.w	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2204      	movs	r2, #4
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2204      	movs	r2, #4
 8001db6:	409a      	lsls	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0204 	orr.w	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2210      	movs	r2, #16
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d043      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d03c      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2210      	movs	r2, #16
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d018      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d108      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d024      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
 8001e1e:	e01f      	b.n	8001e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	e016      	b.n	8001e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0208 	bic.w	r2, r2, #8
 8001e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2220      	movs	r2, #32
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 808f 	beq.w	8001f90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8087 	beq.w	8001f90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2220      	movs	r2, #32
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d136      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0216 	bic.w	r2, r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_DMA_IRQHandler+0x1da>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0208 	bic.w	r2, r2, #8
 8001ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	223f      	movs	r2, #63	; 0x3f
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07e      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
        }
        return;
 8001f06:	e079      	b.n	8001ffc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d031      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e02c      	b.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e01e      	b.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0210 	bic.w	r2, r2, #16
 8001f6e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d032      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d022      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d307      	bcc.n	8001fd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f2      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x2cc>
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fd8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
 8001ffa:	e000      	b.n	8001ffe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ffc:	bf00      	nop
    }
  }
}
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002020:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d108      	bne.n	8002044 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002042:	e007      	b.n	8002054 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3b10      	subs	r3, #16
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <DMA_CalcBaseAndBitshift+0x68>)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d909      	bls.n	80020a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	659a      	str	r2, [r3, #88]	; 0x58
 80020a0:	e007      	b.n	80020b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	aaaaaaab 	.word	0xaaaaaaab
 80020c8:	08004540 	.word	0x08004540

080020cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11f      	bne.n	8002126 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d856      	bhi.n	800219a <DMA_CheckFifoParam+0xce>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <DMA_CheckFifoParam+0x28>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	08002117 	.word	0x08002117
 80020fc:	08002105 	.word	0x08002105
 8002100:	0800219b 	.word	0x0800219b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d046      	beq.n	800219e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002114:	e043      	b.n	800219e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211e:	d140      	bne.n	80021a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002124:	e03d      	b.n	80021a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212e:	d121      	bne.n	8002174 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d837      	bhi.n	80021a6 <DMA_CheckFifoParam+0xda>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <DMA_CheckFifoParam+0x70>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	08002153 	.word	0x08002153
 8002144:	0800214d 	.word	0x0800214d
 8002148:	08002165 	.word	0x08002165
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      break;
 8002150:	e030      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d025      	beq.n	80021aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002162:	e022      	b.n	80021aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800216c:	d11f      	bne.n	80021ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002172:	e01c      	b.n	80021ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d903      	bls.n	8002182 <DMA_CheckFifoParam+0xb6>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d003      	beq.n	8002188 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002180:	e018      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
      break;
 8002186:	e015      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      break;
 8002198:	e00b      	b.n	80021b2 <DMA_CheckFifoParam+0xe6>
      break;
 800219a:	bf00      	nop
 800219c:	e00a      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e008      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e006      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e004      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e002      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021b2:	bf00      	nop
    }
  } 
  
  return status; 
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e16b      	b.n	80024b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 815a 	bne.w	80024b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d005      	beq.n	8002216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	2b02      	cmp	r3, #2
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b03      	cmp	r3, #3
 8002282:	d017      	beq.n	80022b4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80b4 	beq.w	80024b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b60      	ldr	r3, [pc, #384]	; (80024d0 <HAL_GPIO_Init+0x30c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a5f      	ldr	r2, [pc, #380]	; (80024d0 <HAL_GPIO_Init+0x30c>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <HAL_GPIO_Init+0x30c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002366:	4a5b      	ldr	r2, [pc, #364]	; (80024d4 <HAL_GPIO_Init+0x310>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_GPIO_Init+0x314>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x226>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_GPIO_Init+0x318>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x222>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a50      	ldr	r2, [pc, #320]	; (80024e0 <HAL_GPIO_Init+0x31c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x21e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_GPIO_Init+0x320>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x21a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4e      	ldr	r2, [pc, #312]	; (80024e8 <HAL_GPIO_Init+0x324>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x216>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4d      	ldr	r2, [pc, #308]	; (80024ec <HAL_GPIO_Init+0x328>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x212>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_GPIO_Init+0x32c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x20e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4b      	ldr	r2, [pc, #300]	; (80024f4 <HAL_GPIO_Init+0x330>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x20a>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00e      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023ce:	2308      	movs	r3, #8
 80023d0:	e00c      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023d2:	2306      	movs	r3, #6
 80023d4:	e00a      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023d6:	2305      	movs	r3, #5
 80023d8:	e008      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023da:	2304      	movs	r3, #4
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023de:	2303      	movs	r3, #3
 80023e0:	e004      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x228>
 80023ea:	2300      	movs	r3, #0
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f002 0203 	and.w	r2, r2, #3
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	4093      	lsls	r3, r2
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fc:	4935      	ldr	r1, [pc, #212]	; (80024d4 <HAL_GPIO_Init+0x310>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_GPIO_Init+0x334>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242e:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <HAL_GPIO_Init+0x334>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_GPIO_Init+0x334>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <HAL_GPIO_Init+0x334>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_GPIO_Init+0x334>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <HAL_GPIO_Init+0x334>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_GPIO_Init+0x334>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <HAL_GPIO_Init+0x334>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b0f      	cmp	r3, #15
 80024bc:	f67f ae90 	bls.w	80021e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40013800 	.word	0x40013800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40020800 	.word	0x40020800
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40021400 	.word	0x40021400
 80024f0:	40021800 	.word	0x40021800
 80024f4:	40021c00 	.word	0x40021c00
 80024f8:	40013c00 	.word	0x40013c00

080024fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e267      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d075      	beq.n	8002606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00c      	beq.n	8002540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002526:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252e:	2b08      	cmp	r3, #8
 8002530:	d112      	bne.n	8002558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800253e:	d10b      	bne.n	8002558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d05b      	beq.n	8002604 <HAL_RCC_OscConfig+0x108>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d157      	bne.n	8002604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e242      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x74>
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a75      	ldr	r2, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0xb0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x98>
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6f      	ldr	r2, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6c      	ldr	r2, [pc, #432]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xb0>
 8002594:	4b69      	ldr	r3, [pc, #420]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe ff6c 	bl	8001490 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe ff68 	bl	8001490 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e207      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0xc0>
 80025da:	e014      	b.n	8002606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff58 	bl	8001490 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7fe ff54 	bl	8001490 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1f3      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0xe8>
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d063      	beq.n	80026da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002626:	2b08      	cmp	r3, #8
 8002628:	d11c      	bne.n	8002664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b44      	ldr	r3, [pc, #272]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d116      	bne.n	8002664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x152>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e1c7      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	e03a      	b.n	80026da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCC_OscConfig+0x244>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe ff0d 	bl	8001490 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe ff09 	bl	8001490 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e1a8      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4925      	ldr	r1, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_OscConfig+0x244>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe feec 	bl	8001490 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe fee8 	bl	8001490 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e187      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d036      	beq.n	8002754 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_RCC_OscConfig+0x248>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fecc 	bl	8001490 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe fec8 	bl	8001490 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e167      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_OscConfig+0x240>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x200>
 800271a:	e01b      	b.n	8002754 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_OscConfig+0x248>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7fe feb5 	bl	8001490 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	e00e      	b.n	8002748 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe feb1 	bl	8001490 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d907      	bls.n	8002748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e150      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000
 8002744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800274a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ea      	bne.n	800272a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8097 	beq.w	8002890 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b81      	ldr	r3, [pc, #516]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b7d      	ldr	r3, [pc, #500]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a7c      	ldr	r2, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b7a      	ldr	r3, [pc, #488]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b77      	ldr	r3, [pc, #476]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b74      	ldr	r3, [pc, #464]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a73      	ldr	r2, [pc, #460]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fe fe71 	bl	8001490 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fe fe6d 	bl	8001490 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e10c      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x474>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x2ea>
 80027d8:	4b64      	ldr	r3, [pc, #400]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a63      	ldr	r2, [pc, #396]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x324>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x30c>
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a5e      	ldr	r2, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a5b      	ldr	r2, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x324>
 8002808:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	4b55      	ldr	r3, [pc, #340]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a54      	ldr	r2, [pc, #336]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fe32 	bl	8001490 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fe2e 	bl	8001490 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0cb      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ee      	beq.n	8002830 <HAL_RCC_OscConfig+0x334>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fe1c 	bl	8001490 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fe18 	bl	8001490 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0b5      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002872:	4b3e      	ldr	r3, [pc, #248]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ee      	bne.n	800285c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a1 	beq.w	80029dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289a:	4b34      	ldr	r3, [pc, #208]	; (800296c <HAL_RCC_OscConfig+0x470>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d05c      	beq.n	8002960 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d141      	bne.n	8002932 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCC_OscConfig+0x478>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fdec 	bl	8001490 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fde8 	bl	8001490 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e087      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x470>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x478>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe fdc1 	bl	8001490 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fdbd 	bl	8001490 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e05c      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x416>
 8002930:	e054      	b.n	80029dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x478>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fdaa 	bl	8001490 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fda6 	bl	8001490 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e045      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x470>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x444>
 800295e:	e03d      	b.n	80029dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e038      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000
 8002974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x4ec>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d028      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d121      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d11a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d111      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0cc      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d90c      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b8      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	494d      	ldr	r1, [pc, #308]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d044      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d119      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e067      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4934      	ldr	r1, [pc, #208]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fcd8 	bl	8001490 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe fcd4 	bl	8001490 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e04f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 020c 	and.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1eb      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d20c      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b72:	f000 f821 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490a      	ldr	r1, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fc38 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023c00 	.word	0x40023c00
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	08004530 	.word	0x08004530
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bbc:	b094      	sub	sp, #80	; 0x50
 8002bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc8:	2300      	movs	r3, #0
 8002bca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd0:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d00d      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	f200 80e1 	bhi.w	8002da4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x34>
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bea:	e0db      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bec:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bf0:	e0db      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf2:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bf6:	e0d8      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf8:	4b6f      	ldr	r3, [pc, #444]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c02:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0e:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	2200      	movs	r2, #0
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
 8002c26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	f04f 0000 	mov.w	r0, #0
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	0159      	lsls	r1, r3, #5
 8002c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3c:	0150      	lsls	r0, r2, #5
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4621      	mov	r1, r4
 8002c44:	1a51      	subs	r1, r2, r1
 8002c46:	6139      	str	r1, [r7, #16]
 8002c48:	4629      	mov	r1, r5
 8002c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	018b      	lsls	r3, r1, #6
 8002c60:	4651      	mov	r1, sl
 8002c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c66:	4651      	mov	r1, sl
 8002c68:	018a      	lsls	r2, r1, #6
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c70:	4659      	mov	r1, fp
 8002c72:	eb63 0901 	sbc.w	r9, r3, r1
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	eb18 0303 	adds.w	r3, r8, r3
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	462b      	mov	r3, r5
 8002c98:	eb49 0303 	adc.w	r3, r9, r3
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002caa:	4629      	mov	r1, r5
 8002cac:	024b      	lsls	r3, r1, #9
 8002cae:	4621      	mov	r1, r4
 8002cb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	024a      	lsls	r2, r1, #9
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cc8:	f7fd ff1c 	bl	8000b04 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	e058      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
 8002cec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	0159      	lsls	r1, r3, #5
 8002cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d02:	0150      	lsls	r0, r2, #5
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d0e:	4649      	mov	r1, r9
 8002d10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d28:	ebb2 040a 	subs.w	r4, r2, sl
 8002d2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	00eb      	lsls	r3, r5, #3
 8002d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3e:	00e2      	lsls	r2, r4, #3
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	4643      	mov	r3, r8
 8002d46:	18e3      	adds	r3, r4, r3
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	eb45 0303 	adc.w	r3, r5, r3
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	028b      	lsls	r3, r1, #10
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d68:	4621      	mov	r1, r4
 8002d6a:	028a      	lsls	r2, r1, #10
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	2200      	movs	r2, #0
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	61fa      	str	r2, [r7, #28]
 8002d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7c:	f7fd fec2 	bl	8000b04 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3750      	adds	r7, #80	; 0x50
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	007a1200 	.word	0x007a1200

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fa56 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 f95a 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e046      	b.n	8002f0a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_TIM_Base_Start+0xb4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d022      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d01d      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_TIM_Base_Start+0xb8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d018      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_TIM_Base_Start+0xbc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_TIM_Base_Start+0xc0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_TIM_Base_Start+0xc4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_TIM_Base_Start+0xc8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x70>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIM_Base_Start+0xcc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d111      	bne.n	8002ef8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d010      	beq.n	8002f08 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	e007      	b.n	8002f08 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40001800 	.word	0x40001800

08002f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIM_ConfigClockSource+0x18>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0b3      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x180>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f84:	d03e      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0xd0>
 8002f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8a:	f200 8087 	bhi.w	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	f000 8085 	beq.w	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9a:	d87f      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002f9c:	2b70      	cmp	r3, #112	; 0x70
 8002f9e:	d01a      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0xa2>
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d87b      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fa4:	2b60      	cmp	r3, #96	; 0x60
 8002fa6:	d050      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x116>
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d877      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b50      	cmp	r3, #80	; 0x50
 8002fae:	d03c      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xf6>
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d873      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d058      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x136>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d86f      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fbc:	2b30      	cmp	r3, #48	; 0x30
 8002fbe:	d064      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
 8002fc0:	2b30      	cmp	r3, #48	; 0x30
 8002fc2:	d86b      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d060      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d867      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d05c      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d05a      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fd4:	e062      	b.n	800309c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f000 f983 	bl	80032f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	609a      	str	r2, [r3, #8]
      break;
 8003002:	e04e      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f000 f96c 	bl	80032f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003026:	609a      	str	r2, [r3, #8]
      break;
 8003028:	e03b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	f000 f8e0 	bl	80031fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2150      	movs	r1, #80	; 0x50
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f939 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 8003048:	e02b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	461a      	mov	r2, r3
 8003058:	f000 f8ff 	bl	800325a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2160      	movs	r1, #96	; 0x60
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f929 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 8003068:	e01b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	461a      	mov	r2, r3
 8003078:	f000 f8c0 	bl	80031fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f919 	bl	80032ba <TIM_ITRx_SetConfig>
      break;
 8003088:	e00b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 f910 	bl	80032ba <TIM_ITRx_SetConfig>
        break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d00f      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <TIM_Base_SetConfig+0x118>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00b      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <TIM_Base_SetConfig+0x11c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <TIM_Base_SetConfig+0x120>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d02b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d027      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <TIM_Base_SetConfig+0x118>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d023      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <TIM_Base_SetConfig+0x11c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <TIM_Base_SetConfig+0x120>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d017      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <TIM_Base_SetConfig+0x128>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <TIM_Base_SetConfig+0x12c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00f      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <TIM_Base_SetConfig+0x130>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <TIM_Base_SetConfig+0x134>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <TIM_Base_SetConfig+0x138>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <TIM_Base_SetConfig+0x13c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0xf8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40000c00 	.word	0x40000c00
 80031e0:	40010400 	.word	0x40010400
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800
 80031f0:	40001800 	.word	0x40001800
 80031f4:	40001c00 	.word	0x40001c00
 80031f8:	40002000 	.word	0x40002000

080031fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 030a 	bic.w	r3, r3, #10
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325a:	b480      	push	{r7}
 800325c:	b087      	sub	sp, #28
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0210 	bic.w	r2, r3, #16
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	031b      	lsls	r3, r3, #12
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f043 0307 	orr.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	431a      	orrs	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003344:	2302      	movs	r3, #2
 8003346:	e05a      	b.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d01d      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10c      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40010400 	.word	0x40010400
 8003420:	40014000 	.word	0x40014000
 8003424:	40001800 	.word	0x40001800

08003428 <__libc_init_array>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4d0d      	ldr	r5, [pc, #52]	; (8003460 <__libc_init_array+0x38>)
 800342c:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <__libc_init_array+0x3c>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	2600      	movs	r6, #0
 8003434:	42a6      	cmp	r6, r4
 8003436:	d109      	bne.n	800344c <__libc_init_array+0x24>
 8003438:	4d0b      	ldr	r5, [pc, #44]	; (8003468 <__libc_init_array+0x40>)
 800343a:	4c0c      	ldr	r4, [pc, #48]	; (800346c <__libc_init_array+0x44>)
 800343c:	f001 f86a 	bl	8004514 <_init>
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	2600      	movs	r6, #0
 8003446:	42a6      	cmp	r6, r4
 8003448:	d105      	bne.n	8003456 <__libc_init_array+0x2e>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003450:	4798      	blx	r3
 8003452:	3601      	adds	r6, #1
 8003454:	e7ee      	b.n	8003434 <__libc_init_array+0xc>
 8003456:	f855 3b04 	ldr.w	r3, [r5], #4
 800345a:	4798      	blx	r3
 800345c:	3601      	adds	r6, #1
 800345e:	e7f2      	b.n	8003446 <__libc_init_array+0x1e>
 8003460:	08004728 	.word	0x08004728
 8003464:	08004728 	.word	0x08004728
 8003468:	08004728 	.word	0x08004728
 800346c:	0800472c 	.word	0x0800472c

08003470 <memset>:
 8003470:	4402      	add	r2, r0
 8003472:	4603      	mov	r3, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	f803 1b01 	strb.w	r1, [r3], #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <sin>:
 8003480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003482:	ec53 2b10 	vmov	r2, r3, d0
 8003486:	4828      	ldr	r0, [pc, #160]	; (8003528 <sin+0xa8>)
 8003488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800348c:	4281      	cmp	r1, r0
 800348e:	dc07      	bgt.n	80034a0 <sin+0x20>
 8003490:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003520 <sin+0xa0>
 8003494:	2000      	movs	r0, #0
 8003496:	b005      	add	sp, #20
 8003498:	f85d eb04 	ldr.w	lr, [sp], #4
 800349c:	f000 be6c 	b.w	8004178 <__kernel_sin>
 80034a0:	4822      	ldr	r0, [pc, #136]	; (800352c <sin+0xac>)
 80034a2:	4281      	cmp	r1, r0
 80034a4:	dd09      	ble.n	80034ba <sin+0x3a>
 80034a6:	ee10 0a10 	vmov	r0, s0
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7fc fe90 	bl	80001d0 <__aeabi_dsub>
 80034b0:	ec41 0b10 	vmov	d0, r0, r1
 80034b4:	b005      	add	sp, #20
 80034b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ba:	4668      	mov	r0, sp
 80034bc:	f000 f838 	bl	8003530 <__ieee754_rem_pio2>
 80034c0:	f000 0003 	and.w	r0, r0, #3
 80034c4:	2801      	cmp	r0, #1
 80034c6:	d00c      	beq.n	80034e2 <sin+0x62>
 80034c8:	2802      	cmp	r0, #2
 80034ca:	d011      	beq.n	80034f0 <sin+0x70>
 80034cc:	b9f0      	cbnz	r0, 800350c <sin+0x8c>
 80034ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034d2:	ed9d 0b00 	vldr	d0, [sp]
 80034d6:	2001      	movs	r0, #1
 80034d8:	f000 fe4e 	bl	8004178 <__kernel_sin>
 80034dc:	ec51 0b10 	vmov	r0, r1, d0
 80034e0:	e7e6      	b.n	80034b0 <sin+0x30>
 80034e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034e6:	ed9d 0b00 	vldr	d0, [sp]
 80034ea:	f000 fa2d 	bl	8003948 <__kernel_cos>
 80034ee:	e7f5      	b.n	80034dc <sin+0x5c>
 80034f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034f4:	ed9d 0b00 	vldr	d0, [sp]
 80034f8:	2001      	movs	r0, #1
 80034fa:	f000 fe3d 	bl	8004178 <__kernel_sin>
 80034fe:	ec53 2b10 	vmov	r2, r3, d0
 8003502:	ee10 0a10 	vmov	r0, s0
 8003506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800350a:	e7d1      	b.n	80034b0 <sin+0x30>
 800350c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003510:	ed9d 0b00 	vldr	d0, [sp]
 8003514:	f000 fa18 	bl	8003948 <__kernel_cos>
 8003518:	e7f1      	b.n	80034fe <sin+0x7e>
 800351a:	bf00      	nop
 800351c:	f3af 8000 	nop.w
	...
 8003528:	3fe921fb 	.word	0x3fe921fb
 800352c:	7fefffff 	.word	0x7fefffff

08003530 <__ieee754_rem_pio2>:
 8003530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003534:	ed2d 8b02 	vpush	{d8}
 8003538:	ec55 4b10 	vmov	r4, r5, d0
 800353c:	4bca      	ldr	r3, [pc, #808]	; (8003868 <__ieee754_rem_pio2+0x338>)
 800353e:	b08b      	sub	sp, #44	; 0x2c
 8003540:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003544:	4598      	cmp	r8, r3
 8003546:	4682      	mov	sl, r0
 8003548:	9502      	str	r5, [sp, #8]
 800354a:	dc08      	bgt.n	800355e <__ieee754_rem_pio2+0x2e>
 800354c:	2200      	movs	r2, #0
 800354e:	2300      	movs	r3, #0
 8003550:	ed80 0b00 	vstr	d0, [r0]
 8003554:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003558:	f04f 0b00 	mov.w	fp, #0
 800355c:	e028      	b.n	80035b0 <__ieee754_rem_pio2+0x80>
 800355e:	4bc3      	ldr	r3, [pc, #780]	; (800386c <__ieee754_rem_pio2+0x33c>)
 8003560:	4598      	cmp	r8, r3
 8003562:	dc78      	bgt.n	8003656 <__ieee754_rem_pio2+0x126>
 8003564:	9b02      	ldr	r3, [sp, #8]
 8003566:	4ec2      	ldr	r6, [pc, #776]	; (8003870 <__ieee754_rem_pio2+0x340>)
 8003568:	2b00      	cmp	r3, #0
 800356a:	ee10 0a10 	vmov	r0, s0
 800356e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003830 <__ieee754_rem_pio2+0x300>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	4629      	mov	r1, r5
 8003576:	dd39      	ble.n	80035ec <__ieee754_rem_pio2+0xbc>
 8003578:	f7fc fe2a 	bl	80001d0 <__aeabi_dsub>
 800357c:	45b0      	cmp	r8, r6
 800357e:	4604      	mov	r4, r0
 8003580:	460d      	mov	r5, r1
 8003582:	d01b      	beq.n	80035bc <__ieee754_rem_pio2+0x8c>
 8003584:	a3ac      	add	r3, pc, #688	; (adr r3, 8003838 <__ieee754_rem_pio2+0x308>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fe21 	bl	80001d0 <__aeabi_dsub>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	e9ca 2300 	strd	r2, r3, [sl]
 8003596:	4620      	mov	r0, r4
 8003598:	4629      	mov	r1, r5
 800359a:	f7fc fe19 	bl	80001d0 <__aeabi_dsub>
 800359e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003838 <__ieee754_rem_pio2+0x308>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fc fe14 	bl	80001d0 <__aeabi_dsub>
 80035a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80035ac:	f04f 0b01 	mov.w	fp, #1
 80035b0:	4658      	mov	r0, fp
 80035b2:	b00b      	add	sp, #44	; 0x2c
 80035b4:	ecbd 8b02 	vpop	{d8}
 80035b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8003840 <__ieee754_rem_pio2+0x310>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fc fe05 	bl	80001d0 <__aeabi_dsub>
 80035c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8003848 <__ieee754_rem_pio2+0x318>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	4604      	mov	r4, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	f7fc fdfe 	bl	80001d0 <__aeabi_dsub>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	e9ca 2300 	strd	r2, r3, [sl]
 80035dc:	4620      	mov	r0, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	f7fc fdf6 	bl	80001d0 <__aeabi_dsub>
 80035e4:	a398      	add	r3, pc, #608	; (adr r3, 8003848 <__ieee754_rem_pio2+0x318>)
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	e7db      	b.n	80035a4 <__ieee754_rem_pio2+0x74>
 80035ec:	f7fc fdf2 	bl	80001d4 <__adddf3>
 80035f0:	45b0      	cmp	r8, r6
 80035f2:	4604      	mov	r4, r0
 80035f4:	460d      	mov	r5, r1
 80035f6:	d016      	beq.n	8003626 <__ieee754_rem_pio2+0xf6>
 80035f8:	a38f      	add	r3, pc, #572	; (adr r3, 8003838 <__ieee754_rem_pio2+0x308>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fc fde9 	bl	80001d4 <__adddf3>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	e9ca 2300 	strd	r2, r3, [sl]
 800360a:	4620      	mov	r0, r4
 800360c:	4629      	mov	r1, r5
 800360e:	f7fc fddf 	bl	80001d0 <__aeabi_dsub>
 8003612:	a389      	add	r3, pc, #548	; (adr r3, 8003838 <__ieee754_rem_pio2+0x308>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc fddc 	bl	80001d4 <__adddf3>
 800361c:	f04f 3bff 	mov.w	fp, #4294967295
 8003620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003624:	e7c4      	b.n	80035b0 <__ieee754_rem_pio2+0x80>
 8003626:	a386      	add	r3, pc, #536	; (adr r3, 8003840 <__ieee754_rem_pio2+0x310>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f7fc fdd2 	bl	80001d4 <__adddf3>
 8003630:	a385      	add	r3, pc, #532	; (adr r3, 8003848 <__ieee754_rem_pio2+0x318>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	4604      	mov	r4, r0
 8003638:	460d      	mov	r5, r1
 800363a:	f7fc fdcb 	bl	80001d4 <__adddf3>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	e9ca 2300 	strd	r2, r3, [sl]
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	f7fc fdc1 	bl	80001d0 <__aeabi_dsub>
 800364e:	a37e      	add	r3, pc, #504	; (adr r3, 8003848 <__ieee754_rem_pio2+0x318>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	e7e0      	b.n	8003618 <__ieee754_rem_pio2+0xe8>
 8003656:	4b87      	ldr	r3, [pc, #540]	; (8003874 <__ieee754_rem_pio2+0x344>)
 8003658:	4598      	cmp	r8, r3
 800365a:	f300 80d9 	bgt.w	8003810 <__ieee754_rem_pio2+0x2e0>
 800365e:	f000 fe49 	bl	80042f4 <fabs>
 8003662:	ec55 4b10 	vmov	r4, r5, d0
 8003666:	ee10 0a10 	vmov	r0, s0
 800366a:	a379      	add	r3, pc, #484	; (adr r3, 8003850 <__ieee754_rem_pio2+0x320>)
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	4629      	mov	r1, r5
 8003672:	f7fc ff65 	bl	8000540 <__aeabi_dmul>
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <__ieee754_rem_pio2+0x348>)
 8003678:	2200      	movs	r2, #0
 800367a:	f7fc fdab 	bl	80001d4 <__adddf3>
 800367e:	f7fd f9f9 	bl	8000a74 <__aeabi_d2iz>
 8003682:	4683      	mov	fp, r0
 8003684:	f7fc fef2 	bl	800046c <__aeabi_i2d>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	ec43 2b18 	vmov	d8, r2, r3
 8003690:	a367      	add	r3, pc, #412	; (adr r3, 8003830 <__ieee754_rem_pio2+0x300>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f7fc ff53 	bl	8000540 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fc fd95 	bl	80001d0 <__aeabi_dsub>
 80036a6:	a364      	add	r3, pc, #400	; (adr r3, 8003838 <__ieee754_rem_pio2+0x308>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	4606      	mov	r6, r0
 80036ae:	460f      	mov	r7, r1
 80036b0:	ec51 0b18 	vmov	r0, r1, d8
 80036b4:	f7fc ff44 	bl	8000540 <__aeabi_dmul>
 80036b8:	f1bb 0f1f 	cmp.w	fp, #31
 80036bc:	4604      	mov	r4, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	dc0d      	bgt.n	80036de <__ieee754_rem_pio2+0x1ae>
 80036c2:	4b6e      	ldr	r3, [pc, #440]	; (800387c <__ieee754_rem_pio2+0x34c>)
 80036c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	4543      	cmp	r3, r8
 80036ce:	d006      	beq.n	80036de <__ieee754_rem_pio2+0x1ae>
 80036d0:	4622      	mov	r2, r4
 80036d2:	462b      	mov	r3, r5
 80036d4:	4630      	mov	r0, r6
 80036d6:	4639      	mov	r1, r7
 80036d8:	f7fc fd7a 	bl	80001d0 <__aeabi_dsub>
 80036dc:	e00f      	b.n	80036fe <__ieee754_rem_pio2+0x1ce>
 80036de:	462b      	mov	r3, r5
 80036e0:	4622      	mov	r2, r4
 80036e2:	4630      	mov	r0, r6
 80036e4:	4639      	mov	r1, r7
 80036e6:	f7fc fd73 	bl	80001d0 <__aeabi_dsub>
 80036ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80036f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80036f8:	f1b8 0f10 	cmp.w	r8, #16
 80036fc:	dc02      	bgt.n	8003704 <__ieee754_rem_pio2+0x1d4>
 80036fe:	e9ca 0100 	strd	r0, r1, [sl]
 8003702:	e039      	b.n	8003778 <__ieee754_rem_pio2+0x248>
 8003704:	a34e      	add	r3, pc, #312	; (adr r3, 8003840 <__ieee754_rem_pio2+0x310>)
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	ec51 0b18 	vmov	r0, r1, d8
 800370e:	f7fc ff17 	bl	8000540 <__aeabi_dmul>
 8003712:	4604      	mov	r4, r0
 8003714:	460d      	mov	r5, r1
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4630      	mov	r0, r6
 800371c:	4639      	mov	r1, r7
 800371e:	f7fc fd57 	bl	80001d0 <__aeabi_dsub>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4680      	mov	r8, r0
 8003728:	4689      	mov	r9, r1
 800372a:	4630      	mov	r0, r6
 800372c:	4639      	mov	r1, r7
 800372e:	f7fc fd4f 	bl	80001d0 <__aeabi_dsub>
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	f7fc fd4b 	bl	80001d0 <__aeabi_dsub>
 800373a:	a343      	add	r3, pc, #268	; (adr r3, 8003848 <__ieee754_rem_pio2+0x318>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	4604      	mov	r4, r0
 8003742:	460d      	mov	r5, r1
 8003744:	ec51 0b18 	vmov	r0, r1, d8
 8003748:	f7fc fefa 	bl	8000540 <__aeabi_dmul>
 800374c:	4622      	mov	r2, r4
 800374e:	462b      	mov	r3, r5
 8003750:	f7fc fd3e 	bl	80001d0 <__aeabi_dsub>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4604      	mov	r4, r0
 800375a:	460d      	mov	r5, r1
 800375c:	4640      	mov	r0, r8
 800375e:	4649      	mov	r1, r9
 8003760:	f7fc fd36 	bl	80001d0 <__aeabi_dsub>
 8003764:	9a03      	ldr	r2, [sp, #12]
 8003766:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b31      	cmp	r3, #49	; 0x31
 800376e:	dc24      	bgt.n	80037ba <__ieee754_rem_pio2+0x28a>
 8003770:	e9ca 0100 	strd	r0, r1, [sl]
 8003774:	4646      	mov	r6, r8
 8003776:	464f      	mov	r7, r9
 8003778:	e9da 8900 	ldrd	r8, r9, [sl]
 800377c:	4630      	mov	r0, r6
 800377e:	4642      	mov	r2, r8
 8003780:	464b      	mov	r3, r9
 8003782:	4639      	mov	r1, r7
 8003784:	f7fc fd24 	bl	80001d0 <__aeabi_dsub>
 8003788:	462b      	mov	r3, r5
 800378a:	4622      	mov	r2, r4
 800378c:	f7fc fd20 	bl	80001d0 <__aeabi_dsub>
 8003790:	9b02      	ldr	r3, [sp, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003798:	f6bf af0a 	bge.w	80035b0 <__ieee754_rem_pio2+0x80>
 800379c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80037a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80037a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80037a8:	f8ca 8000 	str.w	r8, [sl]
 80037ac:	f8ca 0008 	str.w	r0, [sl, #8]
 80037b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80037b4:	f1cb 0b00 	rsb	fp, fp, #0
 80037b8:	e6fa      	b.n	80035b0 <__ieee754_rem_pio2+0x80>
 80037ba:	a327      	add	r3, pc, #156	; (adr r3, 8003858 <__ieee754_rem_pio2+0x328>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	ec51 0b18 	vmov	r0, r1, d8
 80037c4:	f7fc febc 	bl	8000540 <__aeabi_dmul>
 80037c8:	4604      	mov	r4, r0
 80037ca:	460d      	mov	r5, r1
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4640      	mov	r0, r8
 80037d2:	4649      	mov	r1, r9
 80037d4:	f7fc fcfc 	bl	80001d0 <__aeabi_dsub>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4606      	mov	r6, r0
 80037de:	460f      	mov	r7, r1
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fc fcf4 	bl	80001d0 <__aeabi_dsub>
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
 80037ec:	f7fc fcf0 	bl	80001d0 <__aeabi_dsub>
 80037f0:	a31b      	add	r3, pc, #108	; (adr r3, 8003860 <__ieee754_rem_pio2+0x330>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	4604      	mov	r4, r0
 80037f8:	460d      	mov	r5, r1
 80037fa:	ec51 0b18 	vmov	r0, r1, d8
 80037fe:	f7fc fe9f 	bl	8000540 <__aeabi_dmul>
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	f7fc fce3 	bl	80001d0 <__aeabi_dsub>
 800380a:	4604      	mov	r4, r0
 800380c:	460d      	mov	r5, r1
 800380e:	e75f      	b.n	80036d0 <__ieee754_rem_pio2+0x1a0>
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <__ieee754_rem_pio2+0x350>)
 8003812:	4598      	cmp	r8, r3
 8003814:	dd36      	ble.n	8003884 <__ieee754_rem_pio2+0x354>
 8003816:	ee10 2a10 	vmov	r2, s0
 800381a:	462b      	mov	r3, r5
 800381c:	4620      	mov	r0, r4
 800381e:	4629      	mov	r1, r5
 8003820:	f7fc fcd6 	bl	80001d0 <__aeabi_dsub>
 8003824:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003828:	e9ca 0100 	strd	r0, r1, [sl]
 800382c:	e694      	b.n	8003558 <__ieee754_rem_pio2+0x28>
 800382e:	bf00      	nop
 8003830:	54400000 	.word	0x54400000
 8003834:	3ff921fb 	.word	0x3ff921fb
 8003838:	1a626331 	.word	0x1a626331
 800383c:	3dd0b461 	.word	0x3dd0b461
 8003840:	1a600000 	.word	0x1a600000
 8003844:	3dd0b461 	.word	0x3dd0b461
 8003848:	2e037073 	.word	0x2e037073
 800384c:	3ba3198a 	.word	0x3ba3198a
 8003850:	6dc9c883 	.word	0x6dc9c883
 8003854:	3fe45f30 	.word	0x3fe45f30
 8003858:	2e000000 	.word	0x2e000000
 800385c:	3ba3198a 	.word	0x3ba3198a
 8003860:	252049c1 	.word	0x252049c1
 8003864:	397b839a 	.word	0x397b839a
 8003868:	3fe921fb 	.word	0x3fe921fb
 800386c:	4002d97b 	.word	0x4002d97b
 8003870:	3ff921fb 	.word	0x3ff921fb
 8003874:	413921fb 	.word	0x413921fb
 8003878:	3fe00000 	.word	0x3fe00000
 800387c:	08004548 	.word	0x08004548
 8003880:	7fefffff 	.word	0x7fefffff
 8003884:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003888:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800388c:	ee10 0a10 	vmov	r0, s0
 8003890:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003894:	ee10 6a10 	vmov	r6, s0
 8003898:	460f      	mov	r7, r1
 800389a:	f7fd f8eb 	bl	8000a74 <__aeabi_d2iz>
 800389e:	f7fc fde5 	bl	800046c <__aeabi_i2d>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4630      	mov	r0, r6
 80038a8:	4639      	mov	r1, r7
 80038aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038ae:	f7fc fc8f 	bl	80001d0 <__aeabi_dsub>
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <__ieee754_rem_pio2+0x410>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	f7fc fe43 	bl	8000540 <__aeabi_dmul>
 80038ba:	460f      	mov	r7, r1
 80038bc:	4606      	mov	r6, r0
 80038be:	f7fd f8d9 	bl	8000a74 <__aeabi_d2iz>
 80038c2:	f7fc fdd3 	bl	800046c <__aeabi_i2d>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4630      	mov	r0, r6
 80038cc:	4639      	mov	r1, r7
 80038ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80038d2:	f7fc fc7d 	bl	80001d0 <__aeabi_dsub>
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <__ieee754_rem_pio2+0x410>)
 80038d8:	2200      	movs	r2, #0
 80038da:	f7fc fe31 	bl	8000540 <__aeabi_dmul>
 80038de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80038e2:	ad04      	add	r5, sp, #16
 80038e4:	f04f 0803 	mov.w	r8, #3
 80038e8:	46a9      	mov	r9, r5
 80038ea:	2600      	movs	r6, #0
 80038ec:	2700      	movs	r7, #0
 80038ee:	4632      	mov	r2, r6
 80038f0:	463b      	mov	r3, r7
 80038f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80038f6:	46c3      	mov	fp, r8
 80038f8:	3d08      	subs	r5, #8
 80038fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80038fe:	f7fd f887 	bl	8000a10 <__aeabi_dcmpeq>
 8003902:	2800      	cmp	r0, #0
 8003904:	d1f3      	bne.n	80038ee <__ieee754_rem_pio2+0x3be>
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <__ieee754_rem_pio2+0x414>)
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	2302      	movs	r3, #2
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	4622      	mov	r2, r4
 8003910:	465b      	mov	r3, fp
 8003912:	4651      	mov	r1, sl
 8003914:	4648      	mov	r0, r9
 8003916:	f000 f8df 	bl	8003ad8 <__kernel_rem_pio2>
 800391a:	9b02      	ldr	r3, [sp, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	4683      	mov	fp, r0
 8003920:	f6bf ae46 	bge.w	80035b0 <__ieee754_rem_pio2+0x80>
 8003924:	e9da 2100 	ldrd	r2, r1, [sl]
 8003928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800392c:	e9ca 2300 	strd	r2, r3, [sl]
 8003930:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003938:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800393c:	e73a      	b.n	80037b4 <__ieee754_rem_pio2+0x284>
 800393e:	bf00      	nop
 8003940:	41700000 	.word	0x41700000
 8003944:	080045c8 	.word	0x080045c8

08003948 <__kernel_cos>:
 8003948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	ec57 6b10 	vmov	r6, r7, d0
 8003950:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003954:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003958:	ed8d 1b00 	vstr	d1, [sp]
 800395c:	da07      	bge.n	800396e <__kernel_cos+0x26>
 800395e:	ee10 0a10 	vmov	r0, s0
 8003962:	4639      	mov	r1, r7
 8003964:	f7fd f886 	bl	8000a74 <__aeabi_d2iz>
 8003968:	2800      	cmp	r0, #0
 800396a:	f000 8088 	beq.w	8003a7e <__kernel_cos+0x136>
 800396e:	4632      	mov	r2, r6
 8003970:	463b      	mov	r3, r7
 8003972:	4630      	mov	r0, r6
 8003974:	4639      	mov	r1, r7
 8003976:	f7fc fde3 	bl	8000540 <__aeabi_dmul>
 800397a:	4b51      	ldr	r3, [pc, #324]	; (8003ac0 <__kernel_cos+0x178>)
 800397c:	2200      	movs	r2, #0
 800397e:	4604      	mov	r4, r0
 8003980:	460d      	mov	r5, r1
 8003982:	f7fc fddd 	bl	8000540 <__aeabi_dmul>
 8003986:	a340      	add	r3, pc, #256	; (adr r3, 8003a88 <__kernel_cos+0x140>)
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	4682      	mov	sl, r0
 800398e:	468b      	mov	fp, r1
 8003990:	4620      	mov	r0, r4
 8003992:	4629      	mov	r1, r5
 8003994:	f7fc fdd4 	bl	8000540 <__aeabi_dmul>
 8003998:	a33d      	add	r3, pc, #244	; (adr r3, 8003a90 <__kernel_cos+0x148>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f7fc fc19 	bl	80001d4 <__adddf3>
 80039a2:	4622      	mov	r2, r4
 80039a4:	462b      	mov	r3, r5
 80039a6:	f7fc fdcb 	bl	8000540 <__aeabi_dmul>
 80039aa:	a33b      	add	r3, pc, #236	; (adr r3, 8003a98 <__kernel_cos+0x150>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f7fc fc0e 	bl	80001d0 <__aeabi_dsub>
 80039b4:	4622      	mov	r2, r4
 80039b6:	462b      	mov	r3, r5
 80039b8:	f7fc fdc2 	bl	8000540 <__aeabi_dmul>
 80039bc:	a338      	add	r3, pc, #224	; (adr r3, 8003aa0 <__kernel_cos+0x158>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fc07 	bl	80001d4 <__adddf3>
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	f7fc fdb9 	bl	8000540 <__aeabi_dmul>
 80039ce:	a336      	add	r3, pc, #216	; (adr r3, 8003aa8 <__kernel_cos+0x160>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f7fc fbfc 	bl	80001d0 <__aeabi_dsub>
 80039d8:	4622      	mov	r2, r4
 80039da:	462b      	mov	r3, r5
 80039dc:	f7fc fdb0 	bl	8000540 <__aeabi_dmul>
 80039e0:	a333      	add	r3, pc, #204	; (adr r3, 8003ab0 <__kernel_cos+0x168>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fbf5 	bl	80001d4 <__adddf3>
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	f7fc fda7 	bl	8000540 <__aeabi_dmul>
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	f7fc fda3 	bl	8000540 <__aeabi_dmul>
 80039fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039fe:	4604      	mov	r4, r0
 8003a00:	460d      	mov	r5, r1
 8003a02:	4630      	mov	r0, r6
 8003a04:	4639      	mov	r1, r7
 8003a06:	f7fc fd9b 	bl	8000540 <__aeabi_dmul>
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7fc fbdd 	bl	80001d0 <__aeabi_dsub>
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <__kernel_cos+0x17c>)
 8003a18:	4598      	cmp	r8, r3
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	460f      	mov	r7, r1
 8003a1e:	dc10      	bgt.n	8003a42 <__kernel_cos+0xfa>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4650      	mov	r0, sl
 8003a26:	4659      	mov	r1, fp
 8003a28:	f7fc fbd2 	bl	80001d0 <__aeabi_dsub>
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4926      	ldr	r1, [pc, #152]	; (8003ac8 <__kernel_cos+0x180>)
 8003a30:	4602      	mov	r2, r0
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7fc fbcc 	bl	80001d0 <__aeabi_dsub>
 8003a38:	ec41 0b10 	vmov	d0, r0, r1
 8003a3c:	b003      	add	sp, #12
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <__kernel_cos+0x184>)
 8003a44:	4920      	ldr	r1, [pc, #128]	; (8003ac8 <__kernel_cos+0x180>)
 8003a46:	4598      	cmp	r8, r3
 8003a48:	bfcc      	ite	gt
 8003a4a:	4d21      	ldrgt	r5, [pc, #132]	; (8003ad0 <__kernel_cos+0x188>)
 8003a4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003a50:	2400      	movs	r4, #0
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	2000      	movs	r0, #0
 8003a58:	f7fc fbba 	bl	80001d0 <__aeabi_dsub>
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4680      	mov	r8, r0
 8003a60:	4689      	mov	r9, r1
 8003a62:	462b      	mov	r3, r5
 8003a64:	4650      	mov	r0, sl
 8003a66:	4659      	mov	r1, fp
 8003a68:	f7fc fbb2 	bl	80001d0 <__aeabi_dsub>
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	463b      	mov	r3, r7
 8003a70:	f7fc fbae 	bl	80001d0 <__aeabi_dsub>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4640      	mov	r0, r8
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	e7da      	b.n	8003a34 <__kernel_cos+0xec>
 8003a7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003ab8 <__kernel_cos+0x170>
 8003a82:	e7db      	b.n	8003a3c <__kernel_cos+0xf4>
 8003a84:	f3af 8000 	nop.w
 8003a88:	be8838d4 	.word	0xbe8838d4
 8003a8c:	bda8fae9 	.word	0xbda8fae9
 8003a90:	bdb4b1c4 	.word	0xbdb4b1c4
 8003a94:	3e21ee9e 	.word	0x3e21ee9e
 8003a98:	809c52ad 	.word	0x809c52ad
 8003a9c:	3e927e4f 	.word	0x3e927e4f
 8003aa0:	19cb1590 	.word	0x19cb1590
 8003aa4:	3efa01a0 	.word	0x3efa01a0
 8003aa8:	16c15177 	.word	0x16c15177
 8003aac:	3f56c16c 	.word	0x3f56c16c
 8003ab0:	5555554c 	.word	0x5555554c
 8003ab4:	3fa55555 	.word	0x3fa55555
 8003ab8:	00000000 	.word	0x00000000
 8003abc:	3ff00000 	.word	0x3ff00000
 8003ac0:	3fe00000 	.word	0x3fe00000
 8003ac4:	3fd33332 	.word	0x3fd33332
 8003ac8:	3ff00000 	.word	0x3ff00000
 8003acc:	3fe90000 	.word	0x3fe90000
 8003ad0:	3fd20000 	.word	0x3fd20000
 8003ad4:	00000000 	.word	0x00000000

08003ad8 <__kernel_rem_pio2>:
 8003ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003adc:	ed2d 8b02 	vpush	{d8}
 8003ae0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003ae4:	f112 0f14 	cmn.w	r2, #20
 8003ae8:	9308      	str	r3, [sp, #32]
 8003aea:	9101      	str	r1, [sp, #4]
 8003aec:	4bc4      	ldr	r3, [pc, #784]	; (8003e00 <__kernel_rem_pio2+0x328>)
 8003aee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003af0:	900b      	str	r0, [sp, #44]	; 0x2c
 8003af2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	9b08      	ldr	r3, [sp, #32]
 8003afa:	f103 33ff 	add.w	r3, r3, #4294967295
 8003afe:	bfa8      	it	ge
 8003b00:	1ed4      	subge	r4, r2, #3
 8003b02:	9306      	str	r3, [sp, #24]
 8003b04:	bfb2      	itee	lt
 8003b06:	2400      	movlt	r4, #0
 8003b08:	2318      	movge	r3, #24
 8003b0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003b0e:	f06f 0317 	mvn.w	r3, #23
 8003b12:	fb04 3303 	mla	r3, r4, r3, r3
 8003b16:	eb03 0a02 	add.w	sl, r3, r2
 8003b1a:	9b02      	ldr	r3, [sp, #8]
 8003b1c:	9a06      	ldr	r2, [sp, #24]
 8003b1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003df0 <__kernel_rem_pio2+0x318>
 8003b22:	eb03 0802 	add.w	r8, r3, r2
 8003b26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003b28:	1aa7      	subs	r7, r4, r2
 8003b2a:	ae22      	add	r6, sp, #136	; 0x88
 8003b2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003b30:	2500      	movs	r5, #0
 8003b32:	4545      	cmp	r5, r8
 8003b34:	dd13      	ble.n	8003b5e <__kernel_rem_pio2+0x86>
 8003b36:	9b08      	ldr	r3, [sp, #32]
 8003b38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8003df0 <__kernel_rem_pio2+0x318>
 8003b3c:	aa22      	add	r2, sp, #136	; 0x88
 8003b3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003b42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003b46:	f04f 0800 	mov.w	r8, #0
 8003b4a:	9b02      	ldr	r3, [sp, #8]
 8003b4c:	4598      	cmp	r8, r3
 8003b4e:	dc2f      	bgt.n	8003bb0 <__kernel_rem_pio2+0xd8>
 8003b50:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003b54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003b58:	462f      	mov	r7, r5
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	e01b      	b.n	8003b96 <__kernel_rem_pio2+0xbe>
 8003b5e:	42ef      	cmn	r7, r5
 8003b60:	d407      	bmi.n	8003b72 <__kernel_rem_pio2+0x9a>
 8003b62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003b66:	f7fc fc81 	bl	800046c <__aeabi_i2d>
 8003b6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003b6e:	3501      	adds	r5, #1
 8003b70:	e7df      	b.n	8003b32 <__kernel_rem_pio2+0x5a>
 8003b72:	ec51 0b18 	vmov	r0, r1, d8
 8003b76:	e7f8      	b.n	8003b6a <__kernel_rem_pio2+0x92>
 8003b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003b80:	f7fc fcde 	bl	8000540 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b8c:	f7fc fb22 	bl	80001d4 <__adddf3>
 8003b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b94:	3601      	adds	r6, #1
 8003b96:	9b06      	ldr	r3, [sp, #24]
 8003b98:	429e      	cmp	r6, r3
 8003b9a:	f1a7 0708 	sub.w	r7, r7, #8
 8003b9e:	ddeb      	ble.n	8003b78 <__kernel_rem_pio2+0xa0>
 8003ba0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003ba4:	f108 0801 	add.w	r8, r8, #1
 8003ba8:	ecab 7b02 	vstmia	fp!, {d7}
 8003bac:	3508      	adds	r5, #8
 8003bae:	e7cc      	b.n	8003b4a <__kernel_rem_pio2+0x72>
 8003bb0:	9b02      	ldr	r3, [sp, #8]
 8003bb2:	aa0e      	add	r2, sp, #56	; 0x38
 8003bb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8003bba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003bbc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003bc0:	9c02      	ldr	r4, [sp, #8]
 8003bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8003bc4:	00e3      	lsls	r3, r4, #3
 8003bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8003bc8:	ab9a      	add	r3, sp, #616	; 0x268
 8003bca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003bce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003bd2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8003bd6:	ab72      	add	r3, sp, #456	; 0x1c8
 8003bd8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003bdc:	46c3      	mov	fp, r8
 8003bde:	46a1      	mov	r9, r4
 8003be0:	f1b9 0f00 	cmp.w	r9, #0
 8003be4:	f1a5 0508 	sub.w	r5, r5, #8
 8003be8:	dc77      	bgt.n	8003cda <__kernel_rem_pio2+0x202>
 8003bea:	ec47 6b10 	vmov	d0, r6, r7
 8003bee:	4650      	mov	r0, sl
 8003bf0:	f000 fc0a 	bl	8004408 <scalbn>
 8003bf4:	ec57 6b10 	vmov	r6, r7, d0
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003bfe:	ee10 0a10 	vmov	r0, s0
 8003c02:	4639      	mov	r1, r7
 8003c04:	f7fc fc9c 	bl	8000540 <__aeabi_dmul>
 8003c08:	ec41 0b10 	vmov	d0, r0, r1
 8003c0c:	f000 fb7c 	bl	8004308 <floor>
 8003c10:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <__kernel_rem_pio2+0x32c>)
 8003c12:	ec51 0b10 	vmov	r0, r1, d0
 8003c16:	2200      	movs	r2, #0
 8003c18:	f7fc fc92 	bl	8000540 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4630      	mov	r0, r6
 8003c22:	4639      	mov	r1, r7
 8003c24:	f7fc fad4 	bl	80001d0 <__aeabi_dsub>
 8003c28:	460f      	mov	r7, r1
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	f7fc ff22 	bl	8000a74 <__aeabi_d2iz>
 8003c30:	9004      	str	r0, [sp, #16]
 8003c32:	f7fc fc1b 	bl	800046c <__aeabi_i2d>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	f7fc fac7 	bl	80001d0 <__aeabi_dsub>
 8003c42:	f1ba 0f00 	cmp.w	sl, #0
 8003c46:	4606      	mov	r6, r0
 8003c48:	460f      	mov	r7, r1
 8003c4a:	dd6d      	ble.n	8003d28 <__kernel_rem_pio2+0x250>
 8003c4c:	1e62      	subs	r2, r4, #1
 8003c4e:	ab0e      	add	r3, sp, #56	; 0x38
 8003c50:	9d04      	ldr	r5, [sp, #16]
 8003c52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c56:	f1ca 0118 	rsb	r1, sl, #24
 8003c5a:	fa40 f301 	asr.w	r3, r0, r1
 8003c5e:	441d      	add	r5, r3
 8003c60:	408b      	lsls	r3, r1
 8003c62:	1ac0      	subs	r0, r0, r3
 8003c64:	ab0e      	add	r3, sp, #56	; 0x38
 8003c66:	9504      	str	r5, [sp, #16]
 8003c68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003c6c:	f1ca 0317 	rsb	r3, sl, #23
 8003c70:	fa40 fb03 	asr.w	fp, r0, r3
 8003c74:	f1bb 0f00 	cmp.w	fp, #0
 8003c78:	dd65      	ble.n	8003d46 <__kernel_rem_pio2+0x26e>
 8003c7a:	9b04      	ldr	r3, [sp, #16]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	3301      	adds	r3, #1
 8003c80:	9304      	str	r3, [sp, #16]
 8003c82:	4615      	mov	r5, r2
 8003c84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003c88:	4294      	cmp	r4, r2
 8003c8a:	f300 809c 	bgt.w	8003dc6 <__kernel_rem_pio2+0x2ee>
 8003c8e:	f1ba 0f00 	cmp.w	sl, #0
 8003c92:	dd07      	ble.n	8003ca4 <__kernel_rem_pio2+0x1cc>
 8003c94:	f1ba 0f01 	cmp.w	sl, #1
 8003c98:	f000 80c0 	beq.w	8003e1c <__kernel_rem_pio2+0x344>
 8003c9c:	f1ba 0f02 	cmp.w	sl, #2
 8003ca0:	f000 80c6 	beq.w	8003e30 <__kernel_rem_pio2+0x358>
 8003ca4:	f1bb 0f02 	cmp.w	fp, #2
 8003ca8:	d14d      	bne.n	8003d46 <__kernel_rem_pio2+0x26e>
 8003caa:	4632      	mov	r2, r6
 8003cac:	463b      	mov	r3, r7
 8003cae:	4956      	ldr	r1, [pc, #344]	; (8003e08 <__kernel_rem_pio2+0x330>)
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fc fa8d 	bl	80001d0 <__aeabi_dsub>
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460f      	mov	r7, r1
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	d043      	beq.n	8003d46 <__kernel_rem_pio2+0x26e>
 8003cbe:	4650      	mov	r0, sl
 8003cc0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003df8 <__kernel_rem_pio2+0x320>
 8003cc4:	f000 fba0 	bl	8004408 <scalbn>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	4639      	mov	r1, r7
 8003ccc:	ec53 2b10 	vmov	r2, r3, d0
 8003cd0:	f7fc fa7e 	bl	80001d0 <__aeabi_dsub>
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460f      	mov	r7, r1
 8003cd8:	e035      	b.n	8003d46 <__kernel_rem_pio2+0x26e>
 8003cda:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <__kernel_rem_pio2+0x334>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	f7fc fc2d 	bl	8000540 <__aeabi_dmul>
 8003ce6:	f7fc fec5 	bl	8000a74 <__aeabi_d2iz>
 8003cea:	f7fc fbbf 	bl	800046c <__aeabi_i2d>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	ec43 2b18 	vmov	d8, r2, r3
 8003cf6:	4b46      	ldr	r3, [pc, #280]	; (8003e10 <__kernel_rem_pio2+0x338>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f7fc fc21 	bl	8000540 <__aeabi_dmul>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4630      	mov	r0, r6
 8003d04:	4639      	mov	r1, r7
 8003d06:	f7fc fa63 	bl	80001d0 <__aeabi_dsub>
 8003d0a:	f7fc feb3 	bl	8000a74 <__aeabi_d2iz>
 8003d0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d12:	f84b 0b04 	str.w	r0, [fp], #4
 8003d16:	ec51 0b18 	vmov	r0, r1, d8
 8003d1a:	f7fc fa5b 	bl	80001d4 <__adddf3>
 8003d1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003d22:	4606      	mov	r6, r0
 8003d24:	460f      	mov	r7, r1
 8003d26:	e75b      	b.n	8003be0 <__kernel_rem_pio2+0x108>
 8003d28:	d106      	bne.n	8003d38 <__kernel_rem_pio2+0x260>
 8003d2a:	1e63      	subs	r3, r4, #1
 8003d2c:	aa0e      	add	r2, sp, #56	; 0x38
 8003d2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003d36:	e79d      	b.n	8003c74 <__kernel_rem_pio2+0x19c>
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <__kernel_rem_pio2+0x33c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f7fc fe86 	bl	8000a4c <__aeabi_dcmpge>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d13d      	bne.n	8003dc0 <__kernel_rem_pio2+0x2e8>
 8003d44:	4683      	mov	fp, r0
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	f7fc fe5f 	bl	8000a10 <__aeabi_dcmpeq>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	f000 80c0 	beq.w	8003ed8 <__kernel_rem_pio2+0x400>
 8003d58:	1e65      	subs	r5, r4, #1
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	9902      	ldr	r1, [sp, #8]
 8003d60:	428b      	cmp	r3, r1
 8003d62:	da6c      	bge.n	8003e3e <__kernel_rem_pio2+0x366>
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	f000 8089 	beq.w	8003e7c <__kernel_rem_pio2+0x3a4>
 8003d6a:	ab0e      	add	r3, sp, #56	; 0x38
 8003d6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003d70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80ad 	beq.w	8003ed4 <__kernel_rem_pio2+0x3fc>
 8003d7a:	4650      	mov	r0, sl
 8003d7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8003df8 <__kernel_rem_pio2+0x320>
 8003d80:	f000 fb42 	bl	8004408 <scalbn>
 8003d84:	ab9a      	add	r3, sp, #616	; 0x268
 8003d86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003d8a:	ec57 6b10 	vmov	r6, r7, d0
 8003d8e:	00ec      	lsls	r4, r5, #3
 8003d90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8003d94:	46aa      	mov	sl, r5
 8003d96:	f1ba 0f00 	cmp.w	sl, #0
 8003d9a:	f280 80d6 	bge.w	8003f4a <__kernel_rem_pio2+0x472>
 8003d9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8003df0 <__kernel_rem_pio2+0x318>
 8003da2:	462e      	mov	r6, r5
 8003da4:	2e00      	cmp	r6, #0
 8003da6:	f2c0 8104 	blt.w	8003fb2 <__kernel_rem_pio2+0x4da>
 8003daa:	ab72      	add	r3, sp, #456	; 0x1c8
 8003dac:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003db0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003e18 <__kernel_rem_pio2+0x340>
 8003db4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003db8:	f04f 0800 	mov.w	r8, #0
 8003dbc:	1baf      	subs	r7, r5, r6
 8003dbe:	e0ea      	b.n	8003f96 <__kernel_rem_pio2+0x4be>
 8003dc0:	f04f 0b02 	mov.w	fp, #2
 8003dc4:	e759      	b.n	8003c7a <__kernel_rem_pio2+0x1a2>
 8003dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dca:	b955      	cbnz	r5, 8003de2 <__kernel_rem_pio2+0x30a>
 8003dcc:	b123      	cbz	r3, 8003dd8 <__kernel_rem_pio2+0x300>
 8003dce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003dd2:	f8c8 3000 	str.w	r3, [r8]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	3201      	adds	r2, #1
 8003dda:	f108 0804 	add.w	r8, r8, #4
 8003dde:	461d      	mov	r5, r3
 8003de0:	e752      	b.n	8003c88 <__kernel_rem_pio2+0x1b0>
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	f8c8 3000 	str.w	r3, [r8]
 8003de8:	462b      	mov	r3, r5
 8003dea:	e7f5      	b.n	8003dd8 <__kernel_rem_pio2+0x300>
 8003dec:	f3af 8000 	nop.w
	...
 8003dfc:	3ff00000 	.word	0x3ff00000
 8003e00:	08004710 	.word	0x08004710
 8003e04:	40200000 	.word	0x40200000
 8003e08:	3ff00000 	.word	0x3ff00000
 8003e0c:	3e700000 	.word	0x3e700000
 8003e10:	41700000 	.word	0x41700000
 8003e14:	3fe00000 	.word	0x3fe00000
 8003e18:	080046d0 	.word	0x080046d0
 8003e1c:	1e62      	subs	r2, r4, #1
 8003e1e:	ab0e      	add	r3, sp, #56	; 0x38
 8003e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003e28:	a90e      	add	r1, sp, #56	; 0x38
 8003e2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003e2e:	e739      	b.n	8003ca4 <__kernel_rem_pio2+0x1cc>
 8003e30:	1e62      	subs	r2, r4, #1
 8003e32:	ab0e      	add	r3, sp, #56	; 0x38
 8003e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003e3c:	e7f4      	b.n	8003e28 <__kernel_rem_pio2+0x350>
 8003e3e:	a90e      	add	r1, sp, #56	; 0x38
 8003e40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	430a      	orrs	r2, r1
 8003e48:	e789      	b.n	8003d5e <__kernel_rem_pio2+0x286>
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d0fa      	beq.n	8003e4a <__kernel_rem_pio2+0x372>
 8003e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8003e5a:	446a      	add	r2, sp
 8003e5c:	3a98      	subs	r2, #152	; 0x98
 8003e5e:	920a      	str	r2, [sp, #40]	; 0x28
 8003e60:	9a08      	ldr	r2, [sp, #32]
 8003e62:	18e3      	adds	r3, r4, r3
 8003e64:	18a5      	adds	r5, r4, r2
 8003e66:	aa22      	add	r2, sp, #136	; 0x88
 8003e68:	f104 0801 	add.w	r8, r4, #1
 8003e6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	9b04      	ldr	r3, [sp, #16]
 8003e74:	4543      	cmp	r3, r8
 8003e76:	da04      	bge.n	8003e82 <__kernel_rem_pio2+0x3aa>
 8003e78:	461c      	mov	r4, r3
 8003e7a:	e6a3      	b.n	8003bc4 <__kernel_rem_pio2+0xec>
 8003e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e7e4      	b.n	8003e4c <__kernel_rem_pio2+0x374>
 8003e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003e88:	f7fc faf0 	bl	800046c <__aeabi_i2d>
 8003e8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e92:	46ab      	mov	fp, r5
 8003e94:	461c      	mov	r4, r3
 8003e96:	f04f 0900 	mov.w	r9, #0
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	2700      	movs	r7, #0
 8003e9e:	9b06      	ldr	r3, [sp, #24]
 8003ea0:	4599      	cmp	r9, r3
 8003ea2:	dd06      	ble.n	8003eb2 <__kernel_rem_pio2+0x3da>
 8003ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ea6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003eaa:	f108 0801 	add.w	r8, r8, #1
 8003eae:	930a      	str	r3, [sp, #40]	; 0x28
 8003eb0:	e7df      	b.n	8003e72 <__kernel_rem_pio2+0x39a>
 8003eb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003eb6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003eba:	f7fc fb41 	bl	8000540 <__aeabi_dmul>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	4639      	mov	r1, r7
 8003ec6:	f7fc f985 	bl	80001d4 <__adddf3>
 8003eca:	f109 0901 	add.w	r9, r9, #1
 8003ece:	4606      	mov	r6, r0
 8003ed0:	460f      	mov	r7, r1
 8003ed2:	e7e4      	b.n	8003e9e <__kernel_rem_pio2+0x3c6>
 8003ed4:	3d01      	subs	r5, #1
 8003ed6:	e748      	b.n	8003d6a <__kernel_rem_pio2+0x292>
 8003ed8:	ec47 6b10 	vmov	d0, r6, r7
 8003edc:	f1ca 0000 	rsb	r0, sl, #0
 8003ee0:	f000 fa92 	bl	8004408 <scalbn>
 8003ee4:	ec57 6b10 	vmov	r6, r7, d0
 8003ee8:	4ba0      	ldr	r3, [pc, #640]	; (800416c <__kernel_rem_pio2+0x694>)
 8003eea:	ee10 0a10 	vmov	r0, s0
 8003eee:	2200      	movs	r2, #0
 8003ef0:	4639      	mov	r1, r7
 8003ef2:	f7fc fdab 	bl	8000a4c <__aeabi_dcmpge>
 8003ef6:	b1f8      	cbz	r0, 8003f38 <__kernel_rem_pio2+0x460>
 8003ef8:	4b9d      	ldr	r3, [pc, #628]	; (8004170 <__kernel_rem_pio2+0x698>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	4630      	mov	r0, r6
 8003efe:	4639      	mov	r1, r7
 8003f00:	f7fc fb1e 	bl	8000540 <__aeabi_dmul>
 8003f04:	f7fc fdb6 	bl	8000a74 <__aeabi_d2iz>
 8003f08:	4680      	mov	r8, r0
 8003f0a:	f7fc faaf 	bl	800046c <__aeabi_i2d>
 8003f0e:	4b97      	ldr	r3, [pc, #604]	; (800416c <__kernel_rem_pio2+0x694>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	f7fc fb15 	bl	8000540 <__aeabi_dmul>
 8003f16:	460b      	mov	r3, r1
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f7fc f957 	bl	80001d0 <__aeabi_dsub>
 8003f22:	f7fc fda7 	bl	8000a74 <__aeabi_d2iz>
 8003f26:	1c65      	adds	r5, r4, #1
 8003f28:	ab0e      	add	r3, sp, #56	; 0x38
 8003f2a:	f10a 0a18 	add.w	sl, sl, #24
 8003f2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003f32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003f36:	e720      	b.n	8003d7a <__kernel_rem_pio2+0x2a2>
 8003f38:	4630      	mov	r0, r6
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f7fc fd9a 	bl	8000a74 <__aeabi_d2iz>
 8003f40:	ab0e      	add	r3, sp, #56	; 0x38
 8003f42:	4625      	mov	r5, r4
 8003f44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003f48:	e717      	b.n	8003d7a <__kernel_rem_pio2+0x2a2>
 8003f4a:	ab0e      	add	r3, sp, #56	; 0x38
 8003f4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003f50:	f7fc fa8c 	bl	800046c <__aeabi_i2d>
 8003f54:	4632      	mov	r2, r6
 8003f56:	463b      	mov	r3, r7
 8003f58:	f7fc faf2 	bl	8000540 <__aeabi_dmul>
 8003f5c:	4b84      	ldr	r3, [pc, #528]	; (8004170 <__kernel_rem_pio2+0x698>)
 8003f5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003f62:	2200      	movs	r2, #0
 8003f64:	4630      	mov	r0, r6
 8003f66:	4639      	mov	r1, r7
 8003f68:	f7fc faea 	bl	8000540 <__aeabi_dmul>
 8003f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f70:	4606      	mov	r6, r0
 8003f72:	460f      	mov	r7, r1
 8003f74:	e70f      	b.n	8003d96 <__kernel_rem_pio2+0x2be>
 8003f76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003f7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8003f7e:	f7fc fadf 	bl	8000540 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f8a:	f7fc f923 	bl	80001d4 <__adddf3>
 8003f8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f92:	f108 0801 	add.w	r8, r8, #1
 8003f96:	9b02      	ldr	r3, [sp, #8]
 8003f98:	4598      	cmp	r8, r3
 8003f9a:	dc01      	bgt.n	8003fa0 <__kernel_rem_pio2+0x4c8>
 8003f9c:	45b8      	cmp	r8, r7
 8003f9e:	ddea      	ble.n	8003f76 <__kernel_rem_pio2+0x49e>
 8003fa0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003fa4:	ab4a      	add	r3, sp, #296	; 0x128
 8003fa6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003faa:	ed87 7b00 	vstr	d7, [r7]
 8003fae:	3e01      	subs	r6, #1
 8003fb0:	e6f8      	b.n	8003da4 <__kernel_rem_pio2+0x2cc>
 8003fb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	dc0b      	bgt.n	8003fd0 <__kernel_rem_pio2+0x4f8>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	dc35      	bgt.n	8004028 <__kernel_rem_pio2+0x550>
 8003fbc:	d059      	beq.n	8004072 <__kernel_rem_pio2+0x59a>
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	f003 0007 	and.w	r0, r3, #7
 8003fc4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003fc8:	ecbd 8b02 	vpop	{d8}
 8003fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d1f3      	bne.n	8003fbe <__kernel_rem_pio2+0x4e6>
 8003fd6:	ab4a      	add	r3, sp, #296	; 0x128
 8003fd8:	4423      	add	r3, r4
 8003fda:	9306      	str	r3, [sp, #24]
 8003fdc:	461c      	mov	r4, r3
 8003fde:	469a      	mov	sl, r3
 8003fe0:	9502      	str	r5, [sp, #8]
 8003fe2:	9b02      	ldr	r3, [sp, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f1aa 0a08 	sub.w	sl, sl, #8
 8003fea:	dc6b      	bgt.n	80040c4 <__kernel_rem_pio2+0x5ec>
 8003fec:	46aa      	mov	sl, r5
 8003fee:	f1ba 0f01 	cmp.w	sl, #1
 8003ff2:	f1a4 0408 	sub.w	r4, r4, #8
 8003ff6:	f300 8085 	bgt.w	8004104 <__kernel_rem_pio2+0x62c>
 8003ffa:	9c06      	ldr	r4, [sp, #24]
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	3408      	adds	r4, #8
 8004000:	2100      	movs	r1, #0
 8004002:	2d01      	cmp	r5, #1
 8004004:	f300 809d 	bgt.w	8004142 <__kernel_rem_pio2+0x66a>
 8004008:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800400c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004010:	f1bb 0f00 	cmp.w	fp, #0
 8004014:	f040 809b 	bne.w	800414e <__kernel_rem_pio2+0x676>
 8004018:	9b01      	ldr	r3, [sp, #4]
 800401a:	e9c3 5600 	strd	r5, r6, [r3]
 800401e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004022:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004026:	e7ca      	b.n	8003fbe <__kernel_rem_pio2+0x4e6>
 8004028:	3408      	adds	r4, #8
 800402a:	ab4a      	add	r3, sp, #296	; 0x128
 800402c:	441c      	add	r4, r3
 800402e:	462e      	mov	r6, r5
 8004030:	2000      	movs	r0, #0
 8004032:	2100      	movs	r1, #0
 8004034:	2e00      	cmp	r6, #0
 8004036:	da36      	bge.n	80040a6 <__kernel_rem_pio2+0x5ce>
 8004038:	f1bb 0f00 	cmp.w	fp, #0
 800403c:	d039      	beq.n	80040b2 <__kernel_rem_pio2+0x5da>
 800403e:	4602      	mov	r2, r0
 8004040:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004044:	9c01      	ldr	r4, [sp, #4]
 8004046:	e9c4 2300 	strd	r2, r3, [r4]
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004052:	f7fc f8bd 	bl	80001d0 <__aeabi_dsub>
 8004056:	ae4c      	add	r6, sp, #304	; 0x130
 8004058:	2401      	movs	r4, #1
 800405a:	42a5      	cmp	r5, r4
 800405c:	da2c      	bge.n	80040b8 <__kernel_rem_pio2+0x5e0>
 800405e:	f1bb 0f00 	cmp.w	fp, #0
 8004062:	d002      	beq.n	800406a <__kernel_rem_pio2+0x592>
 8004064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004068:	4619      	mov	r1, r3
 800406a:	9b01      	ldr	r3, [sp, #4]
 800406c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004070:	e7a5      	b.n	8003fbe <__kernel_rem_pio2+0x4e6>
 8004072:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004076:	eb0d 0403 	add.w	r4, sp, r3
 800407a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800407e:	2000      	movs	r0, #0
 8004080:	2100      	movs	r1, #0
 8004082:	2d00      	cmp	r5, #0
 8004084:	da09      	bge.n	800409a <__kernel_rem_pio2+0x5c2>
 8004086:	f1bb 0f00 	cmp.w	fp, #0
 800408a:	d002      	beq.n	8004092 <__kernel_rem_pio2+0x5ba>
 800408c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004090:	4619      	mov	r1, r3
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	e9c3 0100 	strd	r0, r1, [r3]
 8004098:	e791      	b.n	8003fbe <__kernel_rem_pio2+0x4e6>
 800409a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800409e:	f7fc f899 	bl	80001d4 <__adddf3>
 80040a2:	3d01      	subs	r5, #1
 80040a4:	e7ed      	b.n	8004082 <__kernel_rem_pio2+0x5aa>
 80040a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80040aa:	f7fc f893 	bl	80001d4 <__adddf3>
 80040ae:	3e01      	subs	r6, #1
 80040b0:	e7c0      	b.n	8004034 <__kernel_rem_pio2+0x55c>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	e7c5      	b.n	8004044 <__kernel_rem_pio2+0x56c>
 80040b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80040bc:	f7fc f88a 	bl	80001d4 <__adddf3>
 80040c0:	3401      	adds	r4, #1
 80040c2:	e7ca      	b.n	800405a <__kernel_rem_pio2+0x582>
 80040c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80040c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80040cc:	9b02      	ldr	r3, [sp, #8]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	4632      	mov	r2, r6
 80040d4:	463b      	mov	r3, r7
 80040d6:	4640      	mov	r0, r8
 80040d8:	4649      	mov	r1, r9
 80040da:	f7fc f87b 	bl	80001d4 <__adddf3>
 80040de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4640      	mov	r0, r8
 80040e8:	4649      	mov	r1, r9
 80040ea:	f7fc f871 	bl	80001d0 <__aeabi_dsub>
 80040ee:	4632      	mov	r2, r6
 80040f0:	463b      	mov	r3, r7
 80040f2:	f7fc f86f 	bl	80001d4 <__adddf3>
 80040f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80040fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80040fe:	ed8a 7b00 	vstr	d7, [sl]
 8004102:	e76e      	b.n	8003fe2 <__kernel_rem_pio2+0x50a>
 8004104:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004108:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800410c:	4640      	mov	r0, r8
 800410e:	4632      	mov	r2, r6
 8004110:	463b      	mov	r3, r7
 8004112:	4649      	mov	r1, r9
 8004114:	f7fc f85e 	bl	80001d4 <__adddf3>
 8004118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4640      	mov	r0, r8
 8004122:	4649      	mov	r1, r9
 8004124:	f7fc f854 	bl	80001d0 <__aeabi_dsub>
 8004128:	4632      	mov	r2, r6
 800412a:	463b      	mov	r3, r7
 800412c:	f7fc f852 	bl	80001d4 <__adddf3>
 8004130:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004134:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004138:	ed84 7b00 	vstr	d7, [r4]
 800413c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004140:	e755      	b.n	8003fee <__kernel_rem_pio2+0x516>
 8004142:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004146:	f7fc f845 	bl	80001d4 <__adddf3>
 800414a:	3d01      	subs	r5, #1
 800414c:	e759      	b.n	8004002 <__kernel_rem_pio2+0x52a>
 800414e:	9b01      	ldr	r3, [sp, #4]
 8004150:	9a01      	ldr	r2, [sp, #4]
 8004152:	601d      	str	r5, [r3, #0]
 8004154:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004158:	605c      	str	r4, [r3, #4]
 800415a:	609f      	str	r7, [r3, #8]
 800415c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004160:	60d3      	str	r3, [r2, #12]
 8004162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004166:	6110      	str	r0, [r2, #16]
 8004168:	6153      	str	r3, [r2, #20]
 800416a:	e728      	b.n	8003fbe <__kernel_rem_pio2+0x4e6>
 800416c:	41700000 	.word	0x41700000
 8004170:	3e700000 	.word	0x3e700000
 8004174:	00000000 	.word	0x00000000

08004178 <__kernel_sin>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	ed2d 8b04 	vpush	{d8-d9}
 8004180:	eeb0 8a41 	vmov.f32	s16, s2
 8004184:	eef0 8a61 	vmov.f32	s17, s3
 8004188:	ec55 4b10 	vmov	r4, r5, d0
 800418c:	b083      	sub	sp, #12
 800418e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004192:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004196:	9001      	str	r0, [sp, #4]
 8004198:	da06      	bge.n	80041a8 <__kernel_sin+0x30>
 800419a:	ee10 0a10 	vmov	r0, s0
 800419e:	4629      	mov	r1, r5
 80041a0:	f7fc fc68 	bl	8000a74 <__aeabi_d2iz>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d051      	beq.n	800424c <__kernel_sin+0xd4>
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	4620      	mov	r0, r4
 80041ae:	4629      	mov	r1, r5
 80041b0:	f7fc f9c6 	bl	8000540 <__aeabi_dmul>
 80041b4:	4682      	mov	sl, r0
 80041b6:	468b      	mov	fp, r1
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4620      	mov	r0, r4
 80041be:	4629      	mov	r1, r5
 80041c0:	f7fc f9be 	bl	8000540 <__aeabi_dmul>
 80041c4:	a341      	add	r3, pc, #260	; (adr r3, 80042cc <__kernel_sin+0x154>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	4680      	mov	r8, r0
 80041cc:	4689      	mov	r9, r1
 80041ce:	4650      	mov	r0, sl
 80041d0:	4659      	mov	r1, fp
 80041d2:	f7fc f9b5 	bl	8000540 <__aeabi_dmul>
 80041d6:	a33f      	add	r3, pc, #252	; (adr r3, 80042d4 <__kernel_sin+0x15c>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fb fff8 	bl	80001d0 <__aeabi_dsub>
 80041e0:	4652      	mov	r2, sl
 80041e2:	465b      	mov	r3, fp
 80041e4:	f7fc f9ac 	bl	8000540 <__aeabi_dmul>
 80041e8:	a33c      	add	r3, pc, #240	; (adr r3, 80042dc <__kernel_sin+0x164>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fb fff1 	bl	80001d4 <__adddf3>
 80041f2:	4652      	mov	r2, sl
 80041f4:	465b      	mov	r3, fp
 80041f6:	f7fc f9a3 	bl	8000540 <__aeabi_dmul>
 80041fa:	a33a      	add	r3, pc, #232	; (adr r3, 80042e4 <__kernel_sin+0x16c>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fb ffe6 	bl	80001d0 <__aeabi_dsub>
 8004204:	4652      	mov	r2, sl
 8004206:	465b      	mov	r3, fp
 8004208:	f7fc f99a 	bl	8000540 <__aeabi_dmul>
 800420c:	a337      	add	r3, pc, #220	; (adr r3, 80042ec <__kernel_sin+0x174>)
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f7fb ffdf 	bl	80001d4 <__adddf3>
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	4606      	mov	r6, r0
 800421a:	460f      	mov	r7, r1
 800421c:	b9eb      	cbnz	r3, 800425a <__kernel_sin+0xe2>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4650      	mov	r0, sl
 8004224:	4659      	mov	r1, fp
 8004226:	f7fc f98b 	bl	8000540 <__aeabi_dmul>
 800422a:	a325      	add	r3, pc, #148	; (adr r3, 80042c0 <__kernel_sin+0x148>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fb ffce 	bl	80001d0 <__aeabi_dsub>
 8004234:	4642      	mov	r2, r8
 8004236:	464b      	mov	r3, r9
 8004238:	f7fc f982 	bl	8000540 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4620      	mov	r0, r4
 8004242:	4629      	mov	r1, r5
 8004244:	f7fb ffc6 	bl	80001d4 <__adddf3>
 8004248:	4604      	mov	r4, r0
 800424a:	460d      	mov	r5, r1
 800424c:	ec45 4b10 	vmov	d0, r4, r5
 8004250:	b003      	add	sp, #12
 8004252:	ecbd 8b04 	vpop	{d8-d9}
 8004256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <__kernel_sin+0x150>)
 800425c:	ec51 0b18 	vmov	r0, r1, d8
 8004260:	2200      	movs	r2, #0
 8004262:	f7fc f96d 	bl	8000540 <__aeabi_dmul>
 8004266:	4632      	mov	r2, r6
 8004268:	ec41 0b19 	vmov	d9, r0, r1
 800426c:	463b      	mov	r3, r7
 800426e:	4640      	mov	r0, r8
 8004270:	4649      	mov	r1, r9
 8004272:	f7fc f965 	bl	8000540 <__aeabi_dmul>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	ec51 0b19 	vmov	r0, r1, d9
 800427e:	f7fb ffa7 	bl	80001d0 <__aeabi_dsub>
 8004282:	4652      	mov	r2, sl
 8004284:	465b      	mov	r3, fp
 8004286:	f7fc f95b 	bl	8000540 <__aeabi_dmul>
 800428a:	ec53 2b18 	vmov	r2, r3, d8
 800428e:	f7fb ff9f 	bl	80001d0 <__aeabi_dsub>
 8004292:	a30b      	add	r3, pc, #44	; (adr r3, 80042c0 <__kernel_sin+0x148>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	4606      	mov	r6, r0
 800429a:	460f      	mov	r7, r1
 800429c:	4640      	mov	r0, r8
 800429e:	4649      	mov	r1, r9
 80042a0:	f7fc f94e 	bl	8000540 <__aeabi_dmul>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4630      	mov	r0, r6
 80042aa:	4639      	mov	r1, r7
 80042ac:	f7fb ff92 	bl	80001d4 <__adddf3>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4620      	mov	r0, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	f7fb ff8a 	bl	80001d0 <__aeabi_dsub>
 80042bc:	e7c4      	b.n	8004248 <__kernel_sin+0xd0>
 80042be:	bf00      	nop
 80042c0:	55555549 	.word	0x55555549
 80042c4:	3fc55555 	.word	0x3fc55555
 80042c8:	3fe00000 	.word	0x3fe00000
 80042cc:	5acfd57c 	.word	0x5acfd57c
 80042d0:	3de5d93a 	.word	0x3de5d93a
 80042d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80042d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80042dc:	57b1fe7d 	.word	0x57b1fe7d
 80042e0:	3ec71de3 	.word	0x3ec71de3
 80042e4:	19c161d5 	.word	0x19c161d5
 80042e8:	3f2a01a0 	.word	0x3f2a01a0
 80042ec:	1110f8a6 	.word	0x1110f8a6
 80042f0:	3f811111 	.word	0x3f811111

080042f4 <fabs>:
 80042f4:	ec51 0b10 	vmov	r0, r1, d0
 80042f8:	ee10 2a10 	vmov	r2, s0
 80042fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004300:	ec43 2b10 	vmov	d0, r2, r3
 8004304:	4770      	bx	lr
	...

08004308 <floor>:
 8004308:	ec51 0b10 	vmov	r0, r1, d0
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004314:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004318:	2e13      	cmp	r6, #19
 800431a:	ee10 5a10 	vmov	r5, s0
 800431e:	ee10 8a10 	vmov	r8, s0
 8004322:	460c      	mov	r4, r1
 8004324:	dc32      	bgt.n	800438c <floor+0x84>
 8004326:	2e00      	cmp	r6, #0
 8004328:	da14      	bge.n	8004354 <floor+0x4c>
 800432a:	a333      	add	r3, pc, #204	; (adr r3, 80043f8 <floor+0xf0>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fb ff50 	bl	80001d4 <__adddf3>
 8004334:	2200      	movs	r2, #0
 8004336:	2300      	movs	r3, #0
 8004338:	f7fc fb92 	bl	8000a60 <__aeabi_dcmpgt>
 800433c:	b138      	cbz	r0, 800434e <floor+0x46>
 800433e:	2c00      	cmp	r4, #0
 8004340:	da57      	bge.n	80043f2 <floor+0xea>
 8004342:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004346:	431d      	orrs	r5, r3
 8004348:	d001      	beq.n	800434e <floor+0x46>
 800434a:	4c2d      	ldr	r4, [pc, #180]	; (8004400 <floor+0xf8>)
 800434c:	2500      	movs	r5, #0
 800434e:	4621      	mov	r1, r4
 8004350:	4628      	mov	r0, r5
 8004352:	e025      	b.n	80043a0 <floor+0x98>
 8004354:	4f2b      	ldr	r7, [pc, #172]	; (8004404 <floor+0xfc>)
 8004356:	4137      	asrs	r7, r6
 8004358:	ea01 0307 	and.w	r3, r1, r7
 800435c:	4303      	orrs	r3, r0
 800435e:	d01f      	beq.n	80043a0 <floor+0x98>
 8004360:	a325      	add	r3, pc, #148	; (adr r3, 80043f8 <floor+0xf0>)
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f7fb ff35 	bl	80001d4 <__adddf3>
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
 800436e:	f7fc fb77 	bl	8000a60 <__aeabi_dcmpgt>
 8004372:	2800      	cmp	r0, #0
 8004374:	d0eb      	beq.n	800434e <floor+0x46>
 8004376:	2c00      	cmp	r4, #0
 8004378:	bfbe      	ittt	lt
 800437a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800437e:	fa43 f606 	asrlt.w	r6, r3, r6
 8004382:	19a4      	addlt	r4, r4, r6
 8004384:	ea24 0407 	bic.w	r4, r4, r7
 8004388:	2500      	movs	r5, #0
 800438a:	e7e0      	b.n	800434e <floor+0x46>
 800438c:	2e33      	cmp	r6, #51	; 0x33
 800438e:	dd0b      	ble.n	80043a8 <floor+0xa0>
 8004390:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004394:	d104      	bne.n	80043a0 <floor+0x98>
 8004396:	ee10 2a10 	vmov	r2, s0
 800439a:	460b      	mov	r3, r1
 800439c:	f7fb ff1a 	bl	80001d4 <__adddf3>
 80043a0:	ec41 0b10 	vmov	d0, r0, r1
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	fa23 f707 	lsr.w	r7, r3, r7
 80043b4:	4207      	tst	r7, r0
 80043b6:	d0f3      	beq.n	80043a0 <floor+0x98>
 80043b8:	a30f      	add	r3, pc, #60	; (adr r3, 80043f8 <floor+0xf0>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fb ff09 	bl	80001d4 <__adddf3>
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	f7fc fb4b 	bl	8000a60 <__aeabi_dcmpgt>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d0bf      	beq.n	800434e <floor+0x46>
 80043ce:	2c00      	cmp	r4, #0
 80043d0:	da02      	bge.n	80043d8 <floor+0xd0>
 80043d2:	2e14      	cmp	r6, #20
 80043d4:	d103      	bne.n	80043de <floor+0xd6>
 80043d6:	3401      	adds	r4, #1
 80043d8:	ea25 0507 	bic.w	r5, r5, r7
 80043dc:	e7b7      	b.n	800434e <floor+0x46>
 80043de:	2301      	movs	r3, #1
 80043e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80043e4:	fa03 f606 	lsl.w	r6, r3, r6
 80043e8:	4435      	add	r5, r6
 80043ea:	4545      	cmp	r5, r8
 80043ec:	bf38      	it	cc
 80043ee:	18e4      	addcc	r4, r4, r3
 80043f0:	e7f2      	b.n	80043d8 <floor+0xd0>
 80043f2:	2500      	movs	r5, #0
 80043f4:	462c      	mov	r4, r5
 80043f6:	e7aa      	b.n	800434e <floor+0x46>
 80043f8:	8800759c 	.word	0x8800759c
 80043fc:	7e37e43c 	.word	0x7e37e43c
 8004400:	bff00000 	.word	0xbff00000
 8004404:	000fffff 	.word	0x000fffff

08004408 <scalbn>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	ec55 4b10 	vmov	r4, r5, d0
 800440e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004412:	4606      	mov	r6, r0
 8004414:	462b      	mov	r3, r5
 8004416:	b99a      	cbnz	r2, 8004440 <scalbn+0x38>
 8004418:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800441c:	4323      	orrs	r3, r4
 800441e:	d036      	beq.n	800448e <scalbn+0x86>
 8004420:	4b39      	ldr	r3, [pc, #228]	; (8004508 <scalbn+0x100>)
 8004422:	4629      	mov	r1, r5
 8004424:	ee10 0a10 	vmov	r0, s0
 8004428:	2200      	movs	r2, #0
 800442a:	f7fc f889 	bl	8000540 <__aeabi_dmul>
 800442e:	4b37      	ldr	r3, [pc, #220]	; (800450c <scalbn+0x104>)
 8004430:	429e      	cmp	r6, r3
 8004432:	4604      	mov	r4, r0
 8004434:	460d      	mov	r5, r1
 8004436:	da10      	bge.n	800445a <scalbn+0x52>
 8004438:	a32b      	add	r3, pc, #172	; (adr r3, 80044e8 <scalbn+0xe0>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	e03a      	b.n	80044b6 <scalbn+0xae>
 8004440:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004444:	428a      	cmp	r2, r1
 8004446:	d10c      	bne.n	8004462 <scalbn+0x5a>
 8004448:	ee10 2a10 	vmov	r2, s0
 800444c:	4620      	mov	r0, r4
 800444e:	4629      	mov	r1, r5
 8004450:	f7fb fec0 	bl	80001d4 <__adddf3>
 8004454:	4604      	mov	r4, r0
 8004456:	460d      	mov	r5, r1
 8004458:	e019      	b.n	800448e <scalbn+0x86>
 800445a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800445e:	460b      	mov	r3, r1
 8004460:	3a36      	subs	r2, #54	; 0x36
 8004462:	4432      	add	r2, r6
 8004464:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004468:	428a      	cmp	r2, r1
 800446a:	dd08      	ble.n	800447e <scalbn+0x76>
 800446c:	2d00      	cmp	r5, #0
 800446e:	a120      	add	r1, pc, #128	; (adr r1, 80044f0 <scalbn+0xe8>)
 8004470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004474:	da1c      	bge.n	80044b0 <scalbn+0xa8>
 8004476:	a120      	add	r1, pc, #128	; (adr r1, 80044f8 <scalbn+0xf0>)
 8004478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800447c:	e018      	b.n	80044b0 <scalbn+0xa8>
 800447e:	2a00      	cmp	r2, #0
 8004480:	dd08      	ble.n	8004494 <scalbn+0x8c>
 8004482:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004486:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800448a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800448e:	ec45 4b10 	vmov	d0, r4, r5
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004498:	da19      	bge.n	80044ce <scalbn+0xc6>
 800449a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800449e:	429e      	cmp	r6, r3
 80044a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80044a4:	dd0a      	ble.n	80044bc <scalbn+0xb4>
 80044a6:	a112      	add	r1, pc, #72	; (adr r1, 80044f0 <scalbn+0xe8>)
 80044a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e2      	bne.n	8004476 <scalbn+0x6e>
 80044b0:	a30f      	add	r3, pc, #60	; (adr r3, 80044f0 <scalbn+0xe8>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f7fc f843 	bl	8000540 <__aeabi_dmul>
 80044ba:	e7cb      	b.n	8004454 <scalbn+0x4c>
 80044bc:	a10a      	add	r1, pc, #40	; (adr r1, 80044e8 <scalbn+0xe0>)
 80044be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0b8      	beq.n	8004438 <scalbn+0x30>
 80044c6:	a10e      	add	r1, pc, #56	; (adr r1, 8004500 <scalbn+0xf8>)
 80044c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044cc:	e7b4      	b.n	8004438 <scalbn+0x30>
 80044ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80044d2:	3236      	adds	r2, #54	; 0x36
 80044d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80044dc:	4620      	mov	r0, r4
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <scalbn+0x108>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	e7e8      	b.n	80044b6 <scalbn+0xae>
 80044e4:	f3af 8000 	nop.w
 80044e8:	c2f8f359 	.word	0xc2f8f359
 80044ec:	01a56e1f 	.word	0x01a56e1f
 80044f0:	8800759c 	.word	0x8800759c
 80044f4:	7e37e43c 	.word	0x7e37e43c
 80044f8:	8800759c 	.word	0x8800759c
 80044fc:	fe37e43c 	.word	0xfe37e43c
 8004500:	c2f8f359 	.word	0xc2f8f359
 8004504:	81a56e1f 	.word	0x81a56e1f
 8004508:	43500000 	.word	0x43500000
 800450c:	ffff3cb0 	.word	0xffff3cb0
 8004510:	3c900000 	.word	0x3c900000

08004514 <_init>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	bf00      	nop
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr

08004520 <_fini>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	bf00      	nop
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr
